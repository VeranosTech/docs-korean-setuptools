# SOME DESCRIPTIVE TITLE.
# Copyright (C) Python Packaging Authority
# This file is distributed under the same license as the setuptools package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: setuptools 40.6.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-18 15:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../docs/releases.txt:3
msgid "Release Process"
msgstr ""

#: ../../docs/releases.txt:5
msgid ""
"In order to allow for rapid, predictable releases, Setuptools uses a "
"mechanical technique for releases, enacted by Travis following a "
"successful build of a tagged release per `PyPI deployment <https://docs"
".travis-ci.com/user/deployment/pypi>`_."
msgstr ""

#: ../../docs/releases.txt:10
msgid ""
"Prior to cutting a release, please use `towncrier`_ to update "
"``CHANGES.rst`` to summarize the changes since the last release. To "
"update the changelog:"
msgstr ""

#: ../../docs/releases.txt:14
msgid "Install towncrier via ``pip install towncrier`` if not already installed."
msgstr ""

#: ../../docs/releases.txt:15
msgid ""
"Preview the new ``CHANGES.rst`` entry by running ``towncrier --draft "
"--version {new.version.number}`` (enter the desired version number for "
"the next release).  If any changes are needed, make them and generate a "
"new preview until the output is acceptable.  Run ``git add`` for any "
"modified files."
msgstr ""

#: ../../docs/releases.txt:20
msgid ""
"Run ``towncrier --version {new.version.number}`` to stage the changelog "
"updates in git."
msgstr ""

#: ../../docs/releases.txt:22
msgid ""
"Verify that there are no remaining ``changelog.d/*.rst`` files.  If a "
"file was named incorrectly, it may be ignored by towncrier."
msgstr ""

#: ../../docs/releases.txt:24
msgid ""
"Review the updated ``CHANGES.rst`` file.  If any changes are needed, make"
" the edits and stage them via ``git add CHANGES.rst``."
msgstr ""

#: ../../docs/releases.txt:27
msgid ""
"Once the changelog edits are staged and ready to commit, cut a release by"
" installing and running ``bump2version --allow-dirty {part}`` where "
"``part`` is major, minor, or patch based on the scope of the changes in "
"the release. Then, push the commits to the master branch::"
msgstr ""

#: ../../docs/releases.txt:35
msgid ""
"If tests pass, the release will be uploaded to PyPI (from the Python 3.6 "
"tests)."
msgstr ""

#: ../../docs/releases.txt:41
msgid "Release Frequency"
msgstr ""

#: ../../docs/releases.txt:43
msgid ""
"Some have asked why Setuptools is released so frequently. Because "
"Setuptools uses a mechanical release process, it's very easy to make "
"releases whenever the code is stable (tests are passing). As a result, "
"the philosophy is to release early and often."
msgstr ""

#: ../../docs/releases.txt:48
msgid ""
"While some find the frequent releases somewhat surprising, they only "
"empower the user. Although releases are made frequently, users can choose"
" the frequency at which they use those releases. If instead Setuptools "
"contributions were only released in batches, the user would be "
"constrained to only use Setuptools when those official releases were "
"made. With frequent releases, the user can govern exactly how often he "
"wishes to update."
msgstr ""

#: ../../docs/releases.txt:55
msgid ""
"Frequent releases also then obviate the need for dev or beta releases in "
"most cases. Because releases are made early and often, bugs are "
"discovered and corrected quickly, in many cases before other users have "
"yet to encounter them."
msgstr ""

#: ../../docs/releases.txt:60
msgid "Release Managers"
msgstr ""

#: ../../docs/releases.txt:62
msgid ""
"Additionally, anyone with push access to the master branch has access to "
"cut releases."
msgstr ""

