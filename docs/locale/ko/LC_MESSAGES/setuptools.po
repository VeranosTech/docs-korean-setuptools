# SOME DESCRIPTIVE TITLE.
# Copyright (C) Python Packaging Authority
# This file is distributed under the same license as the setuptools package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: setuptools 40.6.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-18 15:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../docs/setuptools.txt:3
msgid "Building and Distributing Packages with Setuptools"
msgstr "Setuptools로 패키지 빌드하고 배포"

#: ../../docs/setuptools.txt:5
msgid ""
"``Setuptools`` is a collection of enhancements to the Python "
"``distutils`` that allow developers to more easily build and distribute "
"Python packages, especially ones that have dependencies on other "
"packages."
msgstr ""
"``Setuptools`` 는 ``distutils`` 의 여러 부분을 발전시킨 버전이며 기본적으로"
"패키지들끼리 디펜던시가 있는 패키지들을 쉽게 빌드하고 배포하게 도와주는 역활을 한다."

#: ../../docs/setuptools.txt:10
msgid ""
"Packages built and distributed using ``setuptools`` look to the user like"
" ordinary Python packages based on the ``distutils``.  Your users don't "
"need to install or even know about setuptools in order to use them, and "
"you don't have to include the entire setuptools package in your "
"distributions.  By including just a single `bootstrap module`_ (a 12K .py"
" file), your package will automatically download and install "
"``setuptools`` if the user is building your package from source and "
"doesn't have a suitable version already installed."
msgstr ""
"``setuptools``\ 로 패키지들을 빌드하고 배포하면 사용자에겐 ``distutils``\ 를 기반으로 "
"한 것처럼 보인다. 사용자는 ``setuptools``\ 를 알 필요도 없고 설치할 필요도 없다. "
"단지 `bootstrap module`_ (a 12K .py file) 을 패키지 안에 포함시키면 된다. 만약 "
"사용자가 소스에서 패키지를 빌드한 뒤 적절한 버전이 이미 설치되어 있지 않으면 패키지가 자동으로 다운로드되고 설치 된다."


#: ../../docs/setuptools.txt:20
msgid "Feature Highlights:"
msgstr "주요 특징들:"

#: ../../docs/setuptools.txt:22
msgid ""
"Automatically find/download/install/upgrade dependencies at build time "
"using the `EasyInstall tool <easy_install.html>`_, which supports "
"downloading via HTTP, FTP, Subversion, and SourceForge, and automatically"
" scans web pages linked from PyPI to find download links.  (It's the "
"closest thing to CPAN currently available for Python.)"
msgstr ""
"`EasyInstall tool <easy_install.html>`_\ 을 사용해 빌드시간에 자동적으로 디펜던시들을 "
"find/download/install/upgrade 할 수 있다. 이 툴은 HTTP, FTP, Subversion, 그리고 SourceForge, "
"다운로드 링크를 찾기 위한 PyPI와 링크된 웹 페이지들을 스캔한다. "
" (이것은 파이썬에서 사용 가능한 CPAN 과 비슷하다.)"

#: ../../docs/setuptools.txt:28
msgid ""
"Create `Python Eggs "
"<http://peak.telecommunity.com/DevCenter/PythonEggs>`_ - a single-file "
"importable distribution format"
msgstr ""
"`Python Eggs "
"<http://peak.telecommunity.com/DevCenter/PythonEggs>`_\ 생성 - 임포트 가능한 단일 파일 배포 포맷"

#: ../../docs/setuptools.txt:31
msgid "Enhanced support for accessing data files hosted in zipped packages."
msgstr "zipped 된 패키지에 접근할 수 있도록 강화된 지원."

#: ../../docs/setuptools.txt:33
msgid ""
"Automatically include all packages in your source tree, without listing "
"them individually in setup.py"
msgstr ""
"개별 패키지들의 목록을 setup.py 에 넣지 않고 자동적으로 소스트리에 있는 모든 패키지들을 포함."

#: ../../docs/setuptools.txt:36
msgid ""
"Automatically include all relevant files in your source distributions, "
"without needing to create a ``MANIFEST.in`` file, and without having to "
"force regeneration of the ``MANIFEST`` file when your source tree "
"changes."
msgstr ""
"소스 트리 변경시 ``MANIFEST.in``\ 파일을 재생성할 필요 없이 소스 배포에 관련된 모든 "
"파일들을 자동적으로 포함한다."

#: ../../docs/setuptools.txt:40
msgid ""
"Automatically generate wrapper scripts or Windows (console and GUI) .exe "
"files for any number of \"main\" functions in your project.  (Note: this "
"is not a py2exe replacement; the .exe files rely on the local Python "
"installation.)"
msgstr ""
"프로젝트의 모든 \"main\" 함수에 대해 자동적으로 wrapper 스크립트나 윈도우 (콘솔과 GUI) .exe "
"파일을 생성한다(주의: 이것은 py2exe 대체 파일이 아니며 .exe. 파일은 로컬 파이썬 설치에 의존)."

#: ../../docs/setuptools.txt:44
msgid ""
"Transparent Cython support, so that your setup.py can list ``.pyx`` files"
" and still work even when the end-user doesn't have Cython installed (as "
"long as you include the Cython-generated C in your source distribution)"
msgstr ""
"편리한 Cython 지원. setup.py 안에 ``.pyx`` 파일들의 목록을 넣을 수 있으며, 최종-사용자는 "
"Cython 설치 없이 사용할 수 있다(주의: Cython이 생성한 C 파일을 소스 배포에 포함시켜야 함)."

#: ../../docs/setuptools.txt:48
msgid ""
"Command aliases - create project-specific, per-user, or site-wide "
"shortcut names for commonly used commands and options"
msgstr ""
"Command aliases - project-specific, per-user, site-wide 별명을 생성하여 "
"명령어와 옵션에 사용할 수 있다."

#: ../../docs/setuptools.txt:51
msgid ""
"Deploy your project in \"development mode\", such that it's available on "
"``sys.path``, yet can still be edited directly from its source checkout."
msgstr ""
"\"development mode\"\ 로 프로젝트 배포. 이 기능은 ``sys.path``\ 에서 사용 가능하지만 "
"소스 체크 아웃에서 직접적으로 수정 가능하다."

#: ../../docs/setuptools.txt:54
msgid ""
"Easily extend the distutils with new commands or ``setup()`` arguments, "
"and distribute/reuse your extensions for multiple projects, without "
"copying code."
msgstr ""
"새로운 명령어와 ``setup()`` 인자를 통해 distutils를 쉽게 확장한다. "
"또한 코드를 복사하지 않고 많은 프로젝트들의 확장 기능들을 배포/재사용 할 수 있다."

#: ../../docs/setuptools.txt:57
msgid ""
"Create extensible applications and frameworks that automatically discover"
" extensions, using simple \"entry points\" declared in a project's setup "
"script."
msgstr ""
"프로젝트의 setup.py 에 정의된 \"entry points\" 를 사용하여 자동적으로 확장 프로그램들을 찾아내는"
"확장 가능한 애플리케이션과 프레임워크를 만들 수 있다."

#: ../../docs/setuptools.txt:60
msgid ""
"Full support for PEP 420 via ``find_namespace_packages()``, which is also"
" backwards compatible to the existing ``find_packages()`` for Python >= "
"3.3."
msgstr ""
"``find_namespace_packages()``\ 를 통해 PEP 420를 지원한다. 이는 파이썬 >= 3.3 의 ``find_packages()``\ "
"와 호환된다."

#: ../../docs/setuptools.txt:63
msgid "**Table of Contents**"
msgstr "**목차**"

#: ../../docs/setuptools.txt:70
msgid "Developer's Guide"
msgstr "개발자 가이드"

#: ../../docs/setuptools.txt:74
msgid "Installing ``setuptools``"
msgstr "``setuptools`` 설치"

#: ../../docs/setuptools.txt:82
msgid "To install the latest version of setuptools, use::"
msgstr "최신 버전의 setuptools를 사용하려면 다음과 같이 입력한다::"

#: ../../docs/setuptools.txt:86
msgid "Refer to `Installing Packages`_ guide for more information."
msgstr "`Installing Packages`_\ 를 참조하여 더 많은 정보를 얻을 수 있다."

#: ../../docs/setuptools.txt:89
msgid "Basic Use"
msgstr "기본적인 사용방법."

#: ../../docs/setuptools.txt:91
msgid ""
"For basic use of setuptools, just import things from setuptools instead "
"of the distutils.  Here's a minimal setup script using setuptools::"
msgstr ""
"기본적으로 setuptools 를 사용하려면 단지 distutils 대신 setuptools 를 "
"임포트 하면 된다. 아래에 가장 최소한 setuptools 를 사용해서 만든 setup 스크립트가 있다::"

#: ../../docs/setuptools.txt:101
msgid ""
"As you can see, it doesn't take much to use setuptools in a project. Run "
"that script in your project folder, alongside the Python packages you "
"have developed."
msgstr ""
"위에서 볼 수 있듯이 setuptools 를 프로젝트에 사용하기 위해 많은 부분을 필요로 하지 않는다. "
"당신이 개발한 파이썬 패키지가 들어있는 프로젝트 폴더 안의 setup.py 스크립트를 실행시켜라."

#: ../../docs/setuptools.txt:105
msgid ""
"Invoke that script to produce distributions and automatically include all"
" packages in the directory where the setup.py lives.  See the `Command "
"Reference`_ section below to see what commands you can give to this setup"
" script. For example, to produce a source distribution, simply invoke::"
msgstr ""
"setup.py 스크립트는 배포판을 만들고 자동적으로 스크립트 내부에 있는 모든 폴더들을"
"포함할 것이다. 아래의 `Command Reference`_\ 절에서 당신이 어떤 명령어를 setup.py "
"스크립트에 줄 수 있는지 보여준다. 예를 들어 소스 배포(source distribution)를 위해서 아래와 같이 "
"입력한다::"

#: ../../docs/setuptools.txt:112
msgid ""
"Of course, before you release your project to PyPI, you'll want to add a "
"bit more information to your setup script to help people find or learn "
"about your project.  And maybe your project will have grown by then to "
"include a few dependencies, and perhaps some data files and scripts::"
msgstr ""
"PyPI에 당신의 프로젝트를 배포하기 전에 사람들이 당신의 프로젝트에 대해 더 자세히 알고"
"배울 수 있도록 몇 가지 추가적인 정보들을 넣을 수 있다. "
"그리고 당신의 프로젝트는 몇 가지 의존성들과 데이터 파일, 스크립트를 포함한 프로젝트로"
"성장 할 수도 있을 것이다. "

#: ../../docs/setuptools.txt:151
msgid ""
"In the sections that follow, we'll explain what most of these ``setup()``"
" arguments do (except for the metadata ones), and the various ways you "
"might use them in your own project(s)."
msgstr ""
"아래의 절에서 ``setup()``\ 함수의 인자가 무슨 동작을 하는지 설명할 것이다. "
"아마 다양한 방법으로 당신의 프로젝트에 적용할 수 있을 것이다."

#: ../../docs/setuptools.txt:157
msgid "Specifying Your Project's Version"
msgstr "프로젝트 버전 명시"

#: ../../docs/setuptools.txt:159
msgid ""
"Setuptools can work well with most versioning schemes; there are, "
"however, a few special things to watch out for, in order to ensure that "
"setuptools and EasyInstall can always tell what version of your package "
"is newer than another version.  Knowing these things will also help you "
"correctly specify what versions of other projects your project depends "
"on."
msgstr ""
"Setuptools는 버전 스키마를 지원하는데 Setuptools와 EasyInstall이 최신 버전을 "
"찾아낼 수 있도록 보장하기 위해서 몇 가지 주의해야 할 점이 있다. "
"이러한 것들을 안다면 프로젝트가 의존하는 다른 프로젝트의 버전을 정확하게 지정 "
"할 수 있다."

#: ../../docs/setuptools.txt:165
msgid ""
"A version consists of an alternating series of release numbers and pre-"
"release or post-release tags.  A release number is a series of digits "
"punctuated by dots, such as ``2.4`` or ``0.5``.  Each series of digits is"
" treated numerically, so releases ``2.1`` and ``2.1.0`` are different "
"ways to spell the same release number, denoting the first subrelease of "
"release 2.  But  ``2.10`` is the *tenth* subrelease of release 2, and so "
"is a different and newer release from ``2.1`` or ``2.1.0``.  Leading "
"zeros within a series of digits are also ignored, so ``2.01`` is the same"
" as ``2.1``, and different from ``2.0.1``."
msgstr ""
"버전은 릴리스 넘버와 프리-릴리즈 태그(혹은 포스트-릴리즈)가 번갈아 가며 구서오딘다. "
"릴리즈 넘버는 ``2.4``\ 나 ``0.5`` 처럼 구둣점이 찍어진 연속된 숫자들이다. "
"각 연속된 숫자들은 수치적으로 취급하기에 릴리즈 ``2.1``\ 과 ``2.1.0``\ 은 "
"다른 방식으로 표현된 같은 릴리즈 넘버이다. "
"하지만 ``2.10`` 은 릴리즈 2의 *열번째* 서브 릴리즈이고 ``2.1``\ 과 ``2.1.0``\ 보다 "
"새로운 릴리즈이다. "
"``2.01``\ 과 같이 0이 맨 앞에 나오는 경우는 ``2.1``\ 과 동일하게 취급하며 "
"이는 ``2.0.1``\ 과는 다른 릴리즈 넘버이다."


#: ../../docs/setuptools.txt:174
msgid ""
"Following a release number, you can have either a pre-release or post-"
"release tag.  Pre-release tags make a version be considered *older* than "
"the version they are appended to.  So, revision ``2.4`` is *newer* than "
"revision ``2.4c1``, which in turn is newer than ``2.4b1`` or ``2.4a1``.  "
"Postrelease tags make a version be considered *newer* than the version "
"they are appended to.  So, revisions like ``2.4-1`` and ``2.4pl3`` are "
"newer than ``2.4``, but are *older* than ``2.4.1`` (which has a higher "
"release number)."
msgstr ""
"릴리즈 넘버 이후에 프리-릴리즈(pre-release)나 포스트-릴리즈(post-release) "
"태그가 있을 수 있다. 프리-릴리즈 태그는 추가되는 버전보다 더 오래된 버전으로 "
"간주한다. 그래서 리비전 ``2.4``\ 는 리비전 ``2.4c1`` 보다 새로운 버전이다. "
"포스트-릴리즈 태그는 이와 반대로 추가되는 버전보다 더 새로운 버전으로 간주된다. "
"따라서 ``2.4-1``\ 이나 ``2.4pl3``\ 리비전은 ``2.4`` 보다 새로운 버전이다. "
"하지만 ``2.4.1``\ 버전 보다는 *오래된* 버전이다."

#: ../../docs/setuptools.txt:182
msgid ""
"A pre-release tag is a series of letters that are alphabetically before "
"\"final\".  Some examples of prerelease tags would include ``alpha``, "
"``beta``, ``a``, ``c``, ``dev``, and so on.  You do not have to place a "
"dot or dash before the prerelease tag if it's immediately after a number,"
" but it's okay to do so if you prefer.  Thus, ``2.4c1`` and ``2.4.c1`` "
"and ``2.4-c1`` all represent release candidate 1 of version ``2.4``, and "
"are treated as identical by setuptools."
msgstr ""
"프리-릴리즈 태그는 \"final\" 이전의 알파뱃으로 이루어진 연속적인 글자들이다. "
"예를 들어 프리-릴리즈 태그는 ``alpha``, ``beta``, ``a``, ``c``, ``dev``, 등"
"을 포함한다. 숫자 바로 뒤에 점(.) 이나 대쉬(-)로 시작하는 프리-릴리즈 태그를 "
"사용해서는 안된다. "
"프리-릴리즈 태그 앞에 점(.) 이나 대쉬(-)를 넣지 않아도 된다. 원하는 경우 숫자를"
"입력해도 된다. 따라서 ``2.4c1``\ 과 ``2.4.c1``, ``2.4-c1``\ 은 모두 ``2.4``\ "
"버전의 첫 번째 릴리즈 후보를 나타내고 setuptools 에서는 이것들을 모두 "
"동일한 것으로 간주 한다."

#: ../../docs/setuptools.txt:190
msgid ""
"In addition, there are three special prerelease tags that are treated as "
"if they were the letter ``c``: ``pre``, ``preview``, and ``rc``.  So, "
"version ``2.4rc1``, ``2.4pre1`` and ``2.4preview1`` are all the exact "
"same version as ``2.4c1``, and are treated as identical by setuptools."
msgstr ""
"추가적으로, 특별한 3가지 프리-릴리즈 태그는 마치 하나의 문자 ``c``\ 로 취급합니다. "
"``c``\ 는 ``pre``, ``preview``, ``rc``\ 과 같으며 따라서 ``2.4rc1``, ``2.4.pre1``, "
"``2.4preview1``\ 은 모두 ``2.4c1``\ 과 같은 버전이고 setuptools 에서는 이것들을 모두 "
"동일한 버전으로 간주한다."

#: ../../docs/setuptools.txt:195
msgid ""
"A post-release tag is either a series of letters that are alphabetically "
"greater than or equal to \"final\", or a dash (``-``).  Post-release tags"
" are generally used to separate patch numbers, port numbers, build "
"numbers, revision numbers, or date stamps from the release number.  For "
"example, the version ``2.4-r1263`` might denote Subversion revision 1263 "
"of a post-release patch of version ``2.4``.  Or you might use "
"``2.4-20051127`` to denote a date-stamped post-release."
msgstr ""
"포스트-릴리즈 태그는 \"final\"\ 버전과 같거나 큰 알파벳순으로 이루어진 일련의 연속적인 글자들이다. "
"포스트-릴리즈 태그는 일반적으로 패치 넘버나 포트 넘버, 빌드 넘버, 리비전 넘버, 릴리즈 넘버의 타임-스탬프"
"와 구분하기 위해 사용된다. 예를 들어 버전 ``2.4-r1263``\ 은 버전 ``2.4``\ 의 리비전 1263의 포스트-릴리즈 패치"
"버전 이라고 볼 수 있다. 아니면 ``2.4-20051127``\ 과 같이 포스트-릴리즈의 데이트-스탬프(date-stamp)를 쓸 수 있다."

#: ../../docs/setuptools.txt:203
msgid ""
"Notice that after each pre or post-release tag, you are free to place "
"another release number, followed again by more pre- or post-release tags."
"  For example, ``0.6a9.dev-r41475`` could denote Subversion revision "
"41475 of the in- development version of the ninth alpha of release 0.6.  "
"Notice that ``dev`` is a pre-release tag, so this version is a *lower* "
"version number than ``0.6a9``, which would be the actual ninth alpha of "
"release 0.6.  But the ``-r41475`` is a post-release tag, so this version "
"is *newer* than ``0.6a9.dev``."
msgstr ""
"각각의 프리-릴리즈나 포스트-릴리즈 태그 이후, 다른 릴리즈 넘버를 위치시킨 다음 좀 더 "
"많은 프리-릴리즈, 포스트-릴리즈 태그를 추가할 수 있다. "
"예를 들어 ``0.6a9.dev-r41475``\ 버전은 릴리즈 0.6의 9번째 알파 개발 버전의 41475 리비전"
"이다. ``dev``\ 는 프리-릴리즈 태그 이기 때문에 이 버전은 ``0.6a9``\ 보다 *오래된* 버전이다. "
"그러나 ``-r41475``\ 는 포스트-릴리즈 태크인데 이것은 ``0.6a9.dev`` 보다 *새로운* 버전이다. "

#: ../../docs/setuptools.txt:211
msgid ""
"For the most part, setuptools' interpretation of version numbers is "
"intuitive, but here are a few tips that will keep you out of trouble in "
"the corner cases:"
msgstr ""
"대부분의 경우 버전 넘버에 대해 setuptools의 해석은 직관적이다. 하지만 몇몇의 상황에서는 그렇지 않을 "
"수 있는데 아래에 몇 가지 팁을 제시한다."

#: ../../docs/setuptools.txt:214
msgid ""
"Don't stick adjoining pre-release tags together without a dot or number "
"between them.  Version ``1.9adev`` is the ``adev`` prerelease of ``1.9``,"
" *not* a development pre-release of ``1.9a``.  Use ``.dev`` instead, as "
"in ``1.9a.dev``, or separate the prerelease tags with a number, as in "
"``1.9a0dev``.  ``1.9a.dev``, ``1.9a0dev``, and even ``1.9.a.dev`` are "
"identical versions from setuptools' point of view, so you can use "
"whatever scheme you prefer."
msgstr ""
"점(.) 이나 숫자 없이 프리-릴리즈 태그들을 인접하게 붙여놓지 않는다. "
"예를 들어 버전 ``1.9adev``\ 는 ``1.9``\ 의 ``adev``\ 서브 릴리즈 이고, "
"이는 ``1.9a``\ 의 개발(dev) 프리-릴리즈가 *아니다* . 대신 ``1.9a.dev``\ 처럼 ``.dev``\ 를 사용한다. "
"혹은 ``1.9a0dev``\ 처럼 프리-릴리즈 태그를 숫자로 분리한다. "
"``1.9a.dev``, ``1.9a0dev``, ``1.9.a.dev``\ 는 setuptools의 관점에서 모두 같은 버전이다. "
"따라서 원하는 넘버링 스키마를 따르면 된다."

#: ../../docs/setuptools.txt:222
msgid ""
"If you want to be certain that your chosen numbering scheme works the way"
" you think it will, you can use the ``pkg_resources.parse_version()`` "
"function to compare different version numbers::"
msgstr ""
"만약 선택한 넘버링 스키마가 원하는 대로 작동하는지 확인하고 싶다면 "
"``pkg_resources.parse_version()``\ 함수를 사용하여 버전들을 비교한다. "

#: ../../docs/setuptools.txt:234
msgid ""
"Once you've decided on a version numbering scheme for your project, you "
"can have setuptools automatically tag your in-development releases with "
"various pre- or post-release tags.  See the following sections for more "
"details:"
msgstr ""
"넘버링 스키마를 정하고 난 뒤 setuptools 에서 자동적으로 프리-릴리즈 태그와 포스트-릴리즈 태그"
"를 사용해 개발(in-development) 릴리즈 태그를 프로젝트에 붙이게 할 수 있다."

#: ../../docs/setuptools.txt:238
msgid "`Tagging and \"Daily Build\" or \"Snapshot\" Releases`_"
msgstr "`Tagging and \"Daily Build\" or \"Snapshot\" Releases`_"

#: ../../docs/setuptools.txt:239
msgid "The `egg_info`_ command"
msgstr "`egg_info`_ 명령어"

#: ../../docs/setuptools.txt:243
msgid "New and Changed ``setup()`` Keywords"
msgstr "새로운, 변경된 ``setup()`` 키워드"

#: ../../docs/setuptools.txt:245
msgid ""
"The following keyword arguments to ``setup()`` are added or changed by "
"``setuptools``.  All of them are optional; you do not have to supply them"
" unless you need the associated ``setuptools`` feature."
msgstr ""
"아래 ``setup()``\ 의 인자들은 ``setuptools``\ 에 의해 추가 되어지거나 변경된다. "
"모든 인자들은 선택적이며(optional) 만약 ``setuptools`` 기능을 사용하고 싶지 않다면 "
"이 인자들을 제공하지 않아도 된다."

#: ../../docs/setuptools.txt:253 ../../docs/setuptools.txt:987
msgid "``include_package_data``"
msgstr "``include_package_data``"

#: ../../docs/setuptools.txt:250
msgid ""
"If set to ``True``, this tells ``setuptools`` to automatically include "
"any data files it finds inside your package directories that are "
"specified by your ``MANIFEST.in`` file.  For more information, see the "
"section below on `Including Data Files`_."
msgstr ""
"``True``\ 면 ``MANIFEST.in``\ 에 명시된 패키지 안의 모든 데이터 파일들을 "
"``setuptools`` 가 자동적으로 포함한다. "
"더 자세한 정보를 위해서 `Including Data Files`_ 참조한다."

#: ../../docs/setuptools.txt:259 ../../docs/setuptools.txt:996
msgid "``exclude_package_data``"
msgstr "``exclude_package_data``"

#: ../../docs/setuptools.txt:256
msgid ""
"A dictionary mapping package names to lists of glob patterns that should "
"be *excluded* from your package directories.  You can use this to trim "
"back any excess files included by ``include_package_data``.  For a "
"complete description and examples, see the section below on `Including "
"Data Files`_."
msgstr ""
"패키지 디렉토리에서 *제외* 해야 하는 glob 패턴 목록에 패키지 이름을 매핑한 사전(dictionary) "
"이다. 이 파일을 사용하여 ``include_package_data``\ 에서 포함된 파일들을 다시 "
"제외시킬 수 있다. 자세한 설명과 예제들은 `Including Data Files`_\ 절을 참조한다."
#: ../../docs/setuptools.txt:268 ../../docs/setuptools.txt:991
msgid "``package_data``"
msgstr "``package_data``"

#: ../../docs/setuptools.txt:262
msgid ""
"A dictionary mapping package names to lists of glob patterns.  For a "
"complete description and examples, see the section below on `Including "
"Data Files`_.  You do not need to use this option if you are using "
"``include_package_data``, unless you need to add e.g. files that are "
"generated by your setup script and build process.  (And are therefore not"
" in source control or are files that you don't want to include in your "
"source distribution.)"
msgstr ""
"glob 패턴 목록에 패키지 이름들을 매핑한 사전이다. 자세한 설명과 예제들은 "
"`Including Data Files`_\ 절을 참조한다. 설치 스크립트 및 빌드 프로세스에서 "
"생성된 파일을 추가해야 하는 경우가 아니면 이 ``include_package_data`` "
" 옵션을 사용할 필요가 없다. "

#: ../../docs/setuptools.txt:274
msgid "``zip_safe``"
msgstr "``zip_safe``"

#: ../../docs/setuptools.txt:271
msgid ""
"A boolean (True or False) flag specifying whether the project can be "
"safely installed and run from a zip file.  If this argument is not "
"supplied, the ``bdist_egg`` command will have to analyze all of your "
"project's contents for possible problems each time it builds an egg."
msgstr ""
"프로젝트를 안전하게 설치하고 zip 파일에서 실행할 수 있는지 여부를 지정하는 "
"``True``\ 또는 ``False``\ 플래그. 이 인수가 제공되지 않으면 ``bdist_egg``\ "
"명령어는 항상 egg 빌드를 할 때마다 가능한 모든 문제점에 대해 프로젝트의 모든 "
"부분들을 분석해야 할 것이다. "

#: ../../docs/setuptools.txt:279
msgid "``install_requires``"
msgstr "``install_requires``"

#: ../../docs/setuptools.txt:277
msgid ""
"A string or list of strings specifying what other distributions need to "
"be installed when this one is.  See the section below on `Declaring "
"Dependencies`_ for details and examples of the format of this argument."
msgstr ""
"설치해야할 다른 배포판을 지정하는 문자열 또는 문자열 목록이다. "
"이 인자에 형식과 예제에 대한 자세한 내용은 `Declaring Dependencies`_\ 절을 참조한다."

#: ../../docs/setuptools.txt:287
msgid "``entry_points``"
msgstr "``entry_points``"

#: ../../docs/setuptools.txt:282
msgid ""
"A dictionary mapping entry point group names to strings or lists of "
"strings defining the entry points.  Entry points are used to support "
"dynamic discovery of services or plugins provided by a project.  See "
"`Dynamic Discovery of Services and Plugins`_ for details and examples of "
"the format of this argument.  In addition, this keyword is used to "
"support `Automatic Script Creation`_."
msgstr ""
"엔트리 포인트를 정의하는 문자열 또는 문자열 그룹을 매핑하는 사전이다. "
"엔트리 포인트는 프로젝트에서 제공하는 서비스나 플러그인을 동적으로 발견 하는데 사용된다. "
"이 인자의 형식과 예제에 대한 자제한 내용은 `Automatic Script Creation`_\ 절을 참조한다. "

#: ../../docs/setuptools.txt:293
msgid "``extras_require``"
msgstr "``extras_require``"

#: ../../docs/setuptools.txt:290
msgid ""
"A dictionary mapping names of \"extras\" (optional features of your "
"project) to strings or lists of strings specifying what other "
"distributions must be installed to support those features.  See the "
"section below on `Declaring Dependencies`_ for details and examples of "
"the format of this argument."
msgstr ""
"\"extras\" (프로젝트의 옵션 기능) 이름을 문자열 또는 문자열 목록에 매핑하는 사전이다. "
"이 기능을 사용하기 위해선 설지해야하는 배포판을 지정한다. "
"이 인자의 형식과 예제에 대한 자제한 내용은 `Declaring Dependencies`_\ 절을 참조한다. "

#: ../../docs/setuptools.txt:297
msgid "``python_requires``"
msgstr "``python_requires``"

#: ../../docs/setuptools.txt:296
msgid ""
"A string corresponding to a version specifier (as defined in PEP 440) for"
" the Python version, used to specify the Requires-Python defined in PEP "
"345."
msgstr ""
"PEP 345에서 정의된 Requires-Python을 지정하는데 사용되는 파이썬 버전의 버전 지정자(PEP 440)에 "
"해당하는 문자열이다."

#: ../../docs/setuptools.txt:313
msgid "``setup_requires``"
msgstr "``setup_requires``"

#: ../../docs/setuptools.txt:300
msgid ""
"A string or list of strings specifying what other distributions need to "
"be present in order for the *setup script* to run.  ``setuptools`` will "
"attempt to obtain these (even going so far as to download them using "
"``EasyInstall``) before processing the rest of the setup script or "
"commands. This argument is needed if you are using distutils extensions "
"as part of your build process; for example, extensions that process "
"setup() arguments and turn them into EGG-INFO metadata files."
msgstr ""
"*설치 스크립트* 를 싱행하기 위해 다른 배포판이 있어야 하는지 지정하는 문자열 또는 "
"문자열 목록이다. ``setuptools``\ 는 나머지 설치 스크립트 또는 명령을 처리하기 전에 "
"이들을 얻으려고(심지어 ``EasyInstall``\ 을 통해 이들을 다운로드받을 수 있음) 시도한다."
"이 인수는 빌드 프로세스의 일부를 distutils extensions로 사용하는 경우 필요하다. "
"예를 들어 setup() 인수를 처리하고 이를 EGG-INFO 메타 데이터 파일로 변환하는 확장 기능이"
"이에 해당된다."

#: ../../docs/setuptools.txt:308
msgid ""
"(Note: projects listed in ``setup_requires`` will NOT be automatically "
"installed on the system where the setup script is being run.  They are "
"simply downloaded to the ./.eggs directory if they're not locally "
"available already.  If you want them to be installed, as well as being "
"available when the setup script is run, you should add them to "
"``install_requires`` **and** ``setup_requires``.)"
msgstr ""
"(참고: ``setup_requires``\ 안에 나열된 프로젝트들은 설치 스크립트가 실행되는 "
"시스템에 자동으로 설치되지 않는다. 만약 로컬에서 사용할 수 없는 경우 "
"./.eggs 디렉토리에 다운된다. 만약 이들을 설치하려는 경우 "
"``install_requires`` **와** ``setup_requires``\ 에 반드시 이들을 추가 해야 한다.)"

#: ../../docs/setuptools.txt:320
msgid "``dependency_links``"
msgstr "``dependency_links``"

#: ../../docs/setuptools.txt:316
msgid ""
"A list of strings naming URLs to be searched when satisfying "
"dependencies. These links will be used if needed to install packages "
"specified by ``setup_requires`` or ``tests_require``.  They will also be "
"written into the egg's metadata for use by tools like EasyInstall to use "
"when installing an ``.egg`` file."
msgstr ""
"종속성을 만족하는 패키지들을 검색할 수 있는 URL의 이름을 나타내는 문자열 목록이다. "
"이 링크는 ``setup_requires``\ 나 ``tests_require``\ 로 지정된 패키지를 설치하는데 "
"필요할 경우 사용된다. 또한 이들은 ``.egg`` 파일을 설치할때 EasyInstall과 같은 도구에서 "
"사용할 수 있도록 egg 메타데이터에 기록 된다."

#: ../../docs/setuptools.txt:332
msgid "``namespace_packages``"
msgstr "``namespace_packages``"

#: ../../docs/setuptools.txt:323
msgid ""
"A list of strings naming the project's \"namespace packages\".  A "
"namespace package is a package that may be split across multiple project "
"distributions.  For example, Zope 3's ``zope`` package is a namespace "
"package, because subpackages like ``zope.interface`` and "
"``zope.publisher`` may be distributed separately.  The egg runtime system"
" can automatically merge such subpackages into a single parent package at"
" runtime, as long as you declare them in each project that contains any "
"subpackages of the namespace package, and as long as the namespace "
"package's ``__init__.py`` does not contain any code other than a "
"namespace declaration.  See the section below on `Namespace Packages`_ "
"for more information."
msgstr ""
"프로젝트의 \"namespace packages\"\ 를 명명하는 문자열 목록이다. "
"네임스페이스 패키지는 여러 프로젝트 배포에 걸쳐 분할될 수있는 패키지이다. "
"예를들어 Zope 3의 ``zope``\ 패키지는 네임스페이스 페키지이다. 왜냐하면 "
"``zope.interface``\ 와 ``zope.publisher``\ 같은 서브 패키지들이 독립적으로 "
"배포되어질 것이기 때문이다. egg 런타임 시스템은 네임스페이스 페키지의 서브 패키지가 "
"포함된 각 프로젝트에서 네임스페이스 패키지를 선언할 때마다 이러한 서브 패키지들을 "
"단일 상위 패키지로 자동 병합할 수 있다. 이때 네임스페이스 패키지의 ``__init__.py``\ 가 "
"네임스페이스 선언(declaration)을 제외한 어떤 코드도 포함하고 있지 않아야 한다. "
"더 자세한 내용은 `Namespace Packages`_\ 을 참조한다. "


#: ../../docs/setuptools.txt:345
msgid "``test_suite``"
msgstr "``test_suite``"

#: ../../docs/setuptools.txt:335
msgid ""
"A string naming a ``unittest.TestCase`` subclass (or a package or module "
"containing one or more of them, or a method of such a subclass), or "
"naming a function that can be called with no arguments and returns a "
"``unittest.TestSuite``.  If the named suite is a module, and the module "
"has an ``additional_tests()`` function, it is called and the results are "
"added to the tests to be run.  If the named suite is a package, any "
"submodules and subpackages are recursively added to the overall test "
"suite."
msgstr ""
"``unittest.TestCase``\ 서브클래스(혹은 패키지거나 이러한 메소드를 담고있는 모듈)"
"의 이름인 문자열이나 인자 없이 호출되고 ``unittest.TestSuite``\ 를 리턴하는 함수의 이름이다."
"만약 명명된 suite가 모듈이고 모듈에 ``additional_tests()``\ 함수를 가지고 있으면 "
"해당 모듈이 호출되고 결과가 실행할 테스트에 추가된다. 명명된 suite가 패키지면 "
"모든 서브 모듈과 서브 패키지가 전체 테스트 suite에 재귀적으로 추가된다."

#: ../../docs/setuptools.txt:343
msgid ""
"Specifying this argument enables use of the `test`_ command to run the "
"specified test suite, e.g. via ``setup.py test``.  See the section on the"
" `test`_ command below for more details."
msgstr ""
"이 인수를 지정하면 `test`_ 명령을 사용하여 지정된 테스트 케이스를 실행할 수 있다. "
"예를들어 ``setup.py test``\ 명령어를 사용할 수 있다. "
"더 자세한 내용은 `test`_ 절을 참조한다."

#: ../../docs/setuptools.txt:356
msgid "``tests_require``"
msgstr ""

#: ../../docs/setuptools.txt:348
msgid ""
"If your project's tests need one or more additional packages besides "
"those needed to install it, you can use this option to specify them.  It "
"should be a string or list of strings specifying what other distributions"
" need to be present for the package's tests to run.  When you run the "
"``test`` command, ``setuptools`` will  attempt to obtain these (even "
"going so far as to download them using ``EasyInstall``).  Note that these"
" required projects will *not* be installed on the system where the tests "
"are run, but only downloaded to the project's setup directory if they're "
"not already installed locally."
msgstr ""
"프로젝트의 테스트가 패키지를 설치하는데 필요한 것 외에도 하나 이상의 추가적인 패키지"
"를 필요로 하는 경우 이 옵션을 사용하여 패키지를 지정할 수 있다. 테스트 패키지를 "
"실행하기 위해 어떤 배포판이 있어야 하는지를 지정하는 문자열 또는 문자열 목록이다. "
"``test`` 명령을 실행하면 ``setuptool``\ 는 이 패키지들을 얻으려고 (``EasyInstall`` "
"을 사용해 다운로드 받을려고) 시도한다. 테스트가 시작될때 이러한 패키지들을 "
"시스템에 설치하지 *않지만* , 만약 프로젝트의 설치 디렉토리에 아직 로컬로 "
"설치되지 않은 경우에만 다운로드된다."

#: ../../docs/setuptools.txt:379
msgid "``test_loader``"
msgstr "``test_loader``"

#: ../../docs/setuptools.txt:361
msgid ""
"If you would like to use a different way of finding tests to run than "
"what setuptools normally uses, you can specify a module name and class "
"name in this argument.  The named class must be instantiable with no "
"arguments, and its instances must support the ``loadTestsFromNames()`` "
"method as defined in the Python ``unittest`` module's ``TestLoader`` "
"class.  Setuptools will pass only one test \"name\" in the `names` "
"argument: the value supplied for the ``test_suite`` argument.  The loader"
" you specify may interpret this string in any way it likes, as there are "
"no restrictions on what may be contained in a ``test_suite`` string."
msgstr ""
"setuptools가 일반적으로 실행할 테스트를 찾는 방법 보다 다른 방법을 사용하려면 "
"이 인수에 모듈 이름과 클래스 이름을 지정할 수 있다. "
"지정된 클래스는 반드시 인수없이 인스턴스화 가능해야하며, 그 인스턴스는 "
"파이썬 ``unittest`` 모듈의 ``TestLoader``\ 클래스 안에 정의된 "
" ``loadTestsFromNames()``\ 메소드를 지원해야한다. "
"Setuptools는 `names` 인수에 하나의 \"name\" 테스트(이는 ``test_suite`` 인수에 대해 제공된 값)"
"만 전달할 것이다. ``test_suite`` 문자열에 포함될 수있는 것에 제한이 없기 때문에 지정한 "
"``TestLoader``\ 는 원하는 대로 이 문자열을 해석할 수 있다."

#: ../../docs/setuptools.txt:371
msgid ""
"The module name and class name must be separated by a ``:``.  The default"
" value of this argument is "
"``\"setuptools.command.test:ScanningLoader\"``.  If you want to use the "
"default ``unittest`` behavior, you can specify "
"``\"unittest:TestLoader\"`` as your ``test_loader`` argument instead.  "
"This will prevent automatic scanning of submodules and subpackages."
msgstr ""
"모듈 이름과 클래스 이름은 ``:``\ 로 구분 되어져야 한다. "
"이 인자의 기본값은 ``\"setuptools.command.test:ScanningLoader\"``\ 이다. "
"만약 기본적인 ``unittest``\ 동작을 사용하고 싶다면, ``test_loader``\ 인자 대신 "
"``\"unittest:TestLoader\"``\ 로 지정할 수 있다. "
"이렇게 하면 서브 모듈들과 서브패키지들을 자동적으로 스캔하는 것을 막을 수 있다."

#: ../../docs/setuptools.txt:377
msgid ""
"The module and class you specify here may be contained in another "
"package, as long as you use the ``tests_require`` option to ensure that "
"the package containing the loader class is available when the ``test`` "
"command is run."
msgstr ""
"``test``\ 명령을 실행할때 로더 클래스를 포함하는 패키지를 사용할 수 있도록 "
"``tests_require``\ 옵션을 사용하는 한, 여기에서 지정한 모듈과 클래스는 다른 "
"패키지에 포함될 수 있다."

#: ../../docs/setuptools.txt:395
msgid "``eager_resources``"
msgstr "``eager_resources``"

#: ../../docs/setuptools.txt:382
msgid ""
"A list of strings naming resources that should be extracted together, if "
"any of them is needed, or if any C extensions included in the project are"
" imported.  This argument is only useful if the project will be installed"
" as a zipfile, and there is a need to have all of the listed resources be"
" extracted to the filesystem *as a unit*.  Resources listed here should "
"be '/'-separated paths, relative to the source root, so to list a "
"resource ``foo.png`` in package ``bar.baz``, you would include the string"
" ``bar/baz/foo.png`` in this argument."
msgstr "함께 추출되어야 하는 리소스를 명명하는 문자열 목록(특별히 필요한 경우나 "
"프로젝트에 포함된 C extension을 가져 오는 경우)이다. 이 인수는 프로젝트가 "
"zip 파일로 설치되고 나열된 모든 리소스들을 *하나의 단위* 로 파일 시스템에 추출 "
"되어져야 하는 경우에만 유용하다. 여기에 나열된 리소스는 소스 루트와 관련하여 "
"경로가 '/'-로 구분되어야 하므로, 패키지 ``bar.baz``\ 의 ``foo.png`` 리소스는 "
"``bar/baz/foo.png``\ 문자열이 인자로 포함되어야 한다."

#: ../../docs/setuptools.txt:391
msgid ""
"If you only need to obtain resources one at a time, or you don't have any"
" C extensions that access other files in the project (such as data files "
"or shared libraries), you probably do NOT need this argument and "
"shouldn't mess with it.  For more details on how this argument works, see"
" the section below on `Automatic Resource Extraction`_."
msgstr ""
"리소스를 한번에 하나씩만 가져 오거나 프로젝트의 다른 파일(예: 데이터 파일 또는 "
"공유 라이브러리)에 엑세스하는 C extension이 없는 경우 이 인수가 필요하지 않으므로 "
"혼동해서는 안된다. 이 인자가 어떻게 작동하는지 더 자세히 알아보려면 "
"`Automatic Resource Extraction`_\ 절을 참조한다."

#: ../../docs/setuptools.txt:399
msgid "``use_2to3``"
msgstr "``use_2to3``"

#: ../../docs/setuptools.txt:398
msgid ""
"Convert the source code from Python 2 to Python 3 with 2to3 during the "
"build process. See :doc:`python3` for more details."
msgstr ""
"2to3를 사용하여 빌드 과정에서 소스코드를 Python2 에서 Python3 으로 변환하라."
"자세한 내용은 :doc:`python3`\ 을 참조한다."

#: ../../docs/setuptools.txt:403
msgid "``convert_2to3_doctests``"
msgstr "``convert_2to3_doctests``"

#: ../../docs/setuptools.txt:402
msgid ""
"List of doctest source files that need to be converted with 2to3. See "
":doc:`python3` for more details."
msgstr ""
"2to3로 변환해야하는 doctest 소스 파일 목록. 자세한 내용은 :doc:`python3`\ 을 참조한다."

#: ../../docs/setuptools.txt:407
msgid "``use_2to3_fixers``"
msgstr "``use_2to3_fixers``"

#: ../../docs/setuptools.txt:406
msgid ""
"A list of modules to search for additional fixers to be used during the "
"2to3 conversion. See :doc:`python3` for more details."
msgstr ""
"2to3 변환 중에 사용될 추가 픽스처(fixer)를 검색할 모듈 목록이다. "
"자세한 내용은 :doc:`python3`\ 을 참조한다."

#: ../../docs/setuptools.txt:413
msgid "``project_urls``"
msgstr "``project_urls``"

#: ../../docs/setuptools.txt:410
msgid ""
"An arbitrary map of URL names to hyperlinks, allowing more extensible "
"documentation of where various resources can be found than the simple "
"``url`` and ``download_url`` options provide."
msgstr ""
"URL을 하이퍼 링크로 매핑하는 임의의 맵이다. 단순 ``url``\ 및 ``donwload_url`` 옵션 "
"에서 제공하는 것 보다 다양한 리소스를 찾을 수 있는 곳을 더 자세히 문서화 할 수 있다."

#: ../../docs/setuptools.txt:416
msgid "Using ``find_packages()``"
msgstr "``find_packages()`` 사용"

#: ../../docs/setuptools.txt:418
msgid ""
"For simple projects, it's usually easy enough to manually add packages to"
" the ``packages`` argument of ``setup()``.  However, for very large "
"projects (Twisted, PEAK, Zope, Chandler, etc.), it can be a big burden to"
" keep the package list updated.  That's what "
"``setuptools.find_packages()`` is for."
msgstr ""
"간단한 프로젝트의 경우, ``setup()``\ 의 ``packages`` 인수에 패키지를 수동으로 "
"추가하는 것이 일반적으로 쉽다. 그러나 매우 큰 프로젝트(Twisted, PEAK, Zope, Chandler, etc.) "
"의 경우 패키지 목록을 최신 상태로 유지하는 것이 큰 부담이 될 수 있다. "
"이러한 경우를 위해 ``setuptools.find_packages()``\ 가 존재한다."

#: ../../docs/setuptools.txt:423
msgid ""
"``find_packages()`` takes a source directory and two lists of package "
"name patterns to exclude and include.  If omitted, the source directory "
"defaults to the same directory as the setup script.  Some projects use a "
"``src`` or ``lib`` directory as the root of their source tree, and those "
"projects would of course use ``\"src\"`` or ``\"lib\"`` as the first "
"argument to ``find_packages()``.  (And such projects also need something "
"like ``package_dir={'':'src'}`` in their ``setup()`` arguments, but "
"that's just a normal distutils thing.)"
msgstr ""
"``find_packages``\ 는 소스 디렉토리와 제외 및 포함할 패키지 이름 패턴의 목록들을 받는다. "
"이 값을 생략하면 소스 디렉토리의 기본값은 설치 스크립트와 동일한 디렉토리이다. "

#: ../../docs/setuptools.txt:432
msgid ""
"Anyway, ``find_packages()`` walks the target directory, filtering by "
"inclusion patterns, and finds Python packages (any directory). Packages "
"are only recognized if they include an ``__init__.py`` file. Finally, "
"exclusion patterns are applied to remove matching packages."
msgstr ""

#: ../../docs/setuptools.txt:437
msgid ""
"Inclusion and exclusion patterns are package names, optionally including "
"wildcards.  For example, ``find_packages(exclude=[\"*.tests\"])`` will "
"exclude all packages whose last name part is ``tests``.   Or, "
"``find_packages(exclude=[\"*.tests\", \"*.tests.*\"])`` will also exclude"
" any subpackages of packages named ``tests``, but it still won't exclude "
"a top-level ``tests`` package or the children thereof.  In fact, if you "
"really want no ``tests`` packages at all, you'll need something like "
"this::"
msgstr ""

#: ../../docs/setuptools.txt:448
msgid ""
"in order to cover all the bases.  Really, the exclusion patterns are "
"intended to cover simpler use cases than this, like excluding a single, "
"specified package and its subpackages."
msgstr ""

#: ../../docs/setuptools.txt:452
msgid ""
"Regardless of the parameters, the ``find_packages()`` function returns a "
"list of package names suitable for use as the ``packages`` argument to "
"``setup()``, and so is usually the easiest way to set that argument in "
"your setup script.  Especially since it frees you from having to remember"
" to modify your setup script whenever your project grows additional top-"
"level packages or subpackages."
msgstr ""

#: ../../docs/setuptools.txt:460
msgid "``find_namespace_packages()``"
msgstr ""

#: ../../docs/setuptools.txt:461
msgid ""
"In Python 3.3+, ``setuptools`` also provides the "
"``find_namespace_packages`` variant of ``find_packages``, which has the "
"same function signature as ``find_packages``, but works with `PEP 420`_ "
"compliant implicit namespace packages. Here is a minimal setup script "
"using ``find_namespace_packages``::"
msgstr ""

#: ../../docs/setuptools.txt:474
msgid ""
"Keep in mind that according to PEP 420, you may have to either re-"
"organize your codebase a bit or define a few exclusions, as the "
"definition of an implicit namespace package is quite lenient, so for a "
"project organized like so::"
msgstr ""

#: ../../docs/setuptools.txt:487
msgid ""
"A naive ``find_namespace_packages()`` would install both "
"``namespace.mypackage`` and a top-level package called ``tests``! One way"
" to avoid this problem is to use the ``include`` keyword to whitelist the"
" packages to include, like so::"
msgstr ""

#: ../../docs/setuptools.txt:499
msgid ""
"Another option is to use the \"src\" layout, where all package code is "
"placed in the ``src`` directory, like so::"
msgstr ""

#: ../../docs/setuptools.txt:512
msgid "With this layout, the package directory is specified as ``src``, as such::"
msgstr ""

#: ../../docs/setuptools.txt:522
msgid "Automatic Script Creation"
msgstr ""

#: ../../docs/setuptools.txt:524
msgid ""
"Packaging and installing scripts can be a bit awkward with the distutils."
"  For one thing, there's no easy way to have a script's filename match "
"local conventions on both Windows and POSIX platforms.  For another, you "
"often have to create a separate file just for the \"main\" script, when "
"your actual \"main\" is a function in a module somewhere.  And even in "
"Python 2.4, using the ``-m`` option only works for actual ``.py`` files "
"that aren't installed in a package."
msgstr ""

#: ../../docs/setuptools.txt:531
msgid ""
"``setuptools`` fixes all of these problems by automatically generating "
"scripts for you with the correct extension, and on Windows it will even "
"create an ``.exe`` file so that users don't have to change their "
"``PATHEXT`` settings. The way to use this feature is to define \"entry "
"points\" in your setup script that indicate what function the generated "
"script should import and run.  For example, to create two console scripts"
" called ``foo`` and ``bar``, and a GUI script called ``baz``, you might "
"do something like this::"
msgstr ""

#: ../../docs/setuptools.txt:552
msgid ""
"When this project is installed on non-Windows platforms (using \"setup.py"
" install\", \"setup.py develop\", or by using EasyInstall), a set of "
"``foo``, ``bar``, and ``baz`` scripts will be installed that import "
"``main_func`` and ``some_func`` from the specified modules.  The "
"functions you specify are called with no arguments, and their return "
"value is passed to ``sys.exit()``, so you can return an errorlevel or "
"message to print to stderr."
msgstr ""

#: ../../docs/setuptools.txt:559
msgid ""
"On Windows, a set of ``foo.exe``, ``bar.exe``, and ``baz.exe`` launchers "
"are created, alongside a set of ``foo.py``, ``bar.py``, and ``baz.pyw`` "
"files.  The ``.exe`` wrappers find and execute the right version of "
"Python to run the ``.py`` or ``.pyw`` file."
msgstr ""

#: ../../docs/setuptools.txt:564
msgid ""
"You may define as many \"console script\" and \"gui script\" entry points"
" as you like, and each one can optionally specify \"extras\" that it "
"depends on, that will be added to ``sys.path`` when the script is run.  "
"For more information on \"extras\", see the section below on `Declaring "
"Extras`_.  For more information on \"entry points\" in general, see the "
"section below on `Dynamic Discovery of Services and Plugins`_."
msgstr ""

#: ../../docs/setuptools.txt:573
msgid "\"Eggsecutable\" Scripts"
msgstr ""

#: ../../docs/setuptools.txt:575
msgid ""
"Occasionally, there are situations where it's desirable to make an "
"``.egg`` file directly executable.  You can do this by including an entry"
" point such as the following::"
msgstr ""

#: ../../docs/setuptools.txt:588
msgid ""
"Any eggs built from the above setup script will include a short "
"executable prelude that imports and calls ``main_func()`` from "
"``my_package.some_module``. The prelude can be run on Unix-like platforms"
" (including Mac and Linux) by invoking the egg with ``/bin/sh``, or by "
"enabling execute permissions on the ``.egg`` file.  For the executable "
"prelude to run, the appropriate version of Python must be available via "
"the ``PATH`` environment variable, under its \"long\" name.  That is, if "
"the egg is built for Python 2.3, there must be a ``python2.3`` executable"
" present in a directory on ``PATH``."
msgstr ""

#: ../../docs/setuptools.txt:597
msgid ""
"This feature is primarily intended to support ez_setup the installation "
"of setuptools itself on non-Windows platforms, but may also be useful for"
" other projects as well."
msgstr ""

#: ../../docs/setuptools.txt:601
msgid ""
"IMPORTANT NOTE: Eggs with an \"eggsecutable\" header cannot be renamed, "
"or invoked via symlinks.  They *must* be invoked using their original "
"filename, in order to ensure that, once running, ``pkg_resources`` will "
"know what project and version is in use.  The header script will check "
"this and exit with an error if the ``.egg`` file has been renamed or is "
"invoked via a symlink that changes its base name."
msgstr ""

#: ../../docs/setuptools.txt:610
msgid "Declaring Dependencies"
msgstr ""

#: ../../docs/setuptools.txt:612
msgid ""
"``setuptools`` supports automatically installing dependencies when a "
"package is installed, and including information about dependencies in "
"Python Eggs (so that package management tools like EasyInstall can use "
"the information)."
msgstr ""

#: ../../docs/setuptools.txt:616
msgid ""
"``setuptools`` and ``pkg_resources`` use a common syntax for specifying a"
" project's required dependencies.  This syntax consists of a project's "
"PyPI name, optionally followed by a comma-separated list of \"extras\" in"
" square brackets, optionally followed by a comma-separated list of "
"version specifiers.  A version specifier is one of the operators ``<``, "
"``>``, ``<=``, ``>=``, ``==`` or ``!=``, followed by a version "
"identifier.  Tokens may be separated by whitespace, but any whitespace or"
" nonstandard characters within a project name or version identifier must "
"be replaced with ``-``."
msgstr ""

#: ../../docs/setuptools.txt:625
msgid ""
"Version specifiers for a given project are internally sorted into "
"ascending version order, and used to establish what ranges of versions "
"are acceptable. Adjacent redundant conditions are also consolidated (e.g."
" ``\">1, >2\"`` becomes ``\">2\"``, and ``\"<2,<3\"`` becomes "
"``\"<2\"``). ``\"!=\"`` versions are excised from the ranges they fall "
"within.  A project's version is then checked for membership in the "
"resulting ranges. (Note that providing conflicting conditions for the "
"same version (e.g. \"<2,>=2\" or \"==2,!=2\") is meaningless and may "
"therefore produce bizarre results.)"
msgstr ""

#: ../../docs/setuptools.txt:634
msgid "Here are some example requirement specifiers::"
msgstr ""

#: ../../docs/setuptools.txt:646
msgid ""
"The simplest way to include requirement specifiers is to use the "
"``install_requires`` argument to ``setup()``.  It takes a string or list "
"of strings containing requirement specifiers.  If you include more than "
"one requirement in a string, each requirement must begin on a new line."
msgstr ""

#: ../../docs/setuptools.txt:651
msgid "This has three effects:"
msgstr ""

#: ../../docs/setuptools.txt:653
msgid ""
"When your project is installed, either by using EasyInstall, ``setup.py "
"install``, or ``setup.py develop``, all of the dependencies not already "
"installed will be located (via PyPI), downloaded, built (if necessary), "
"and installed."
msgstr ""

#: ../../docs/setuptools.txt:658
msgid ""
"Any scripts in your project will be installed with wrappers that verify "
"the availability of the specified dependencies at runtime, and ensure "
"that the correct versions are added to ``sys.path`` (e.g. if multiple "
"versions have been installed)."
msgstr ""

#: ../../docs/setuptools.txt:663
msgid ""
"Python Egg distributions will include a metadata file listing the "
"dependencies."
msgstr ""

#: ../../docs/setuptools.txt:666
msgid ""
"Note, by the way, that if you declare your dependencies in ``setup.py``, "
"you do *not* need to use the ``require()`` function in your scripts or "
"modules, as long as you either install the project or use ``setup.py "
"develop`` to do development work on it.  (See `\"Development Mode\"`_ "
"below for more details on using ``setup.py develop``.)"
msgstr ""

#: ../../docs/setuptools.txt:674
msgid "Dependencies that aren't in PyPI"
msgstr ""

#: ../../docs/setuptools.txt:676
msgid ""
"If your project depends on packages that don't exist on PyPI, you may "
"still be able to depend on them, as long as they are available for "
"download as:"
msgstr ""

#: ../../docs/setuptools.txt:679
msgid "an egg, in the standard distutils ``sdist`` format,"
msgstr ""

#: ../../docs/setuptools.txt:680
msgid "a single ``.py`` file, or"
msgstr ""

#: ../../docs/setuptools.txt:681
msgid "a VCS repository (Subversion, Mercurial, or Git)."
msgstr ""

#: ../../docs/setuptools.txt:683
msgid ""
"You just need to add some URLs to the ``dependency_links`` argument to "
"``setup()``."
msgstr ""

#: ../../docs/setuptools.txt:686
msgid "The URLs must be either:"
msgstr ""

#: ../../docs/setuptools.txt:688
msgid "direct download URLs,"
msgstr ""

#: ../../docs/setuptools.txt:689
msgid "the URLs of web pages that contain direct download links, or"
msgstr ""

#: ../../docs/setuptools.txt:690
msgid "the repository's URL"
msgstr ""

#: ../../docs/setuptools.txt:692
msgid ""
"In general, it's better to link to web pages, because it is usually less "
"complex to update a web page than to release a new version of your "
"project. You can also use a SourceForge ``showfiles.php`` link in the "
"case where a package you depend on is distributed via SourceForge."
msgstr ""

#: ../../docs/setuptools.txt:697
msgid ""
"If you depend on a package that's distributed as a single ``.py`` file, "
"you must include an ``\"#egg=project-version\"`` suffix to the URL, to "
"give a project name and version number.  (Be sure to escape any dashes in"
" the name or version by replacing them with underscores.)  EasyInstall "
"will recognize this suffix and automatically create a trivial "
"``setup.py`` to wrap the single ``.py`` file as an egg."
msgstr ""

#: ../../docs/setuptools.txt:704
msgid ""
"In the case of a VCS checkout, you should also append ``#egg=project-"
"version`` in order to identify for what package that checkout should be "
"used. You can append ``@REV`` to the URL's path (before the fragment) to "
"specify a revision. Additionally, you can also force the VCS being used "
"by prepending the URL with a certain prefix. Currently available are:"
msgstr ""

#: ../../docs/setuptools.txt:710
msgid "``svn+URL`` for Subversion,"
msgstr ""

#: ../../docs/setuptools.txt:711
msgid "``git+URL`` for Git, and"
msgstr ""

#: ../../docs/setuptools.txt:712
msgid "``hg+URL`` for Mercurial"
msgstr ""

#: ../../docs/setuptools.txt:714
msgid "A more complete example would be:"
msgstr ""

#: ../../docs/setuptools.txt:716
msgid "``vcs+proto://host/path@revision#egg=project-version``"
msgstr ""

#: ../../docs/setuptools.txt:718
msgid ""
"Be careful with the version. It should match the one inside the project "
"files. If you want to disregard the version, you have to omit it both in "
"the ``requires`` and in the URL's fragment."
msgstr ""

#: ../../docs/setuptools.txt:722
msgid ""
"This will do a checkout (or a clone, in Git and Mercurial parlance) to a "
"temporary folder and run ``setup.py bdist_egg``."
msgstr ""

#: ../../docs/setuptools.txt:725
msgid ""
"The ``dependency_links`` option takes the form of a list of URL strings."
"  For example, the below will cause EasyInstall to search the specified "
"page for eggs or source distributions, if the package's dependencies "
"aren't already installed::"
msgstr ""

#: ../../docs/setuptools.txt:742
msgid "Declaring \"Extras\" (optional features with their own dependencies)"
msgstr ""

#: ../../docs/setuptools.txt:744
msgid ""
"Sometimes a project has \"recommended\" dependencies, that are not "
"required for all uses of the project.  For example, a project might offer"
" optional PDF output if ReportLab is installed, and reStructuredText "
"support if docutils is installed.  These optional features are called "
"\"extras\", and setuptools allows you to define their requirements as "
"well.  In this way, other projects that require these optional features "
"can force the additional requirements to be installed, by naming the "
"desired extras in their ``install_requires``."
msgstr ""

#: ../../docs/setuptools.txt:752
msgid ""
"For example, let's say that Project A offers optional PDF and reST "
"support::"
msgstr ""

#: ../../docs/setuptools.txt:763
msgid ""
"As you can see, the ``extras_require`` argument takes a dictionary "
"mapping names of \"extra\" features, to strings or lists of strings "
"describing those features' requirements.  These requirements will *not* "
"be automatically installed unless another package depends on them "
"(directly or indirectly) by including the desired \"extras\" in square "
"brackets after the associated project name.  (Or if the extras were "
"listed in a requirement spec on the EasyInstall command line.)"
msgstr ""

#: ../../docs/setuptools.txt:771
msgid ""
"Extras can be used by a project's `entry points`_ to specify dynamic "
"dependencies.  For example, if Project A includes a \"rst2pdf\" script, "
"it might declare it like this, so that the \"PDF\" requirements are only "
"resolved if the \"rst2pdf\" script is run::"
msgstr ""

#: ../../docs/setuptools.txt:788
msgid ""
"Projects can also use another project's extras when specifying "
"dependencies. For example, if project B needs \"project A\" with PDF "
"support installed, it might declare the dependency like this::"
msgstr ""

#: ../../docs/setuptools.txt:798
msgid ""
"This will cause ReportLab to be installed along with project A, if "
"project B is installed -- even if project A was already installed.  In "
"this way, a project can encapsulate groups of optional \"downstream "
"dependencies\" under a feature name, so that packages that depend on it "
"don't have to know what the downstream dependencies are.  If a later "
"version of Project A builds in PDF support and no longer needs ReportLab,"
" or if it ends up needing other dependencies besides ReportLab in order "
"to provide PDF support, Project B's setup information does not need to "
"change, but the right packages will still be installed if needed."
msgstr ""

#: ../../docs/setuptools.txt:807
msgid ""
"Note, by the way, that if a project ends up not needing any other "
"packages to support a feature, it should keep an empty requirements list "
"for that feature in its ``extras_require`` argument, so that packages "
"depending on that feature don't break (due to an invalid feature name).  "
"For example, if Project A above builds in PDF support and no longer needs"
" ReportLab, it could change its setup to this::"
msgstr ""

#: ../../docs/setuptools.txt:823
msgid ""
"so that Package B doesn't have to remove the ``[PDF]`` from its "
"requirement specifier."
msgstr ""

#: ../../docs/setuptools.txt:831
msgid "Declaring platform specific dependencies"
msgstr ""

#: ../../docs/setuptools.txt:833
msgid ""
"Sometimes a project might require a dependency to run on a specific "
"platform. This could to a package that back ports a module so that it can"
" be used in older python versions.  Or it could be a package that is "
"required to run on a specific operating system.  This will allow a "
"project to work on multiple different platforms without installing "
"dependencies that are not required for a platform that is installing the "
"project."
msgstr ""

#: ../../docs/setuptools.txt:840
msgid ""
"For example, here is a project that uses the ``enum`` module and "
"``pywin32``::"
msgstr ""

#: ../../docs/setuptools.txt:851
msgid ""
"Since the ``enum`` module was added in Python 3.4, it should only be "
"installed if the python version is earlier.  Since ``pywin32`` will only "
"be used on windows, it should only be installed when the operating system"
" is Windows. Specifying version requirements for the dependencies is "
"supported as normal."
msgstr ""

#: ../../docs/setuptools.txt:856
msgid ""
"The environmental markers that may be used for testing platform types are"
" detailed in `PEP 508`_."
msgstr ""

#: ../../docs/setuptools.txt:862
msgid "Including Data Files"
msgstr ""

#: ../../docs/setuptools.txt:864
msgid ""
"The distutils have traditionally allowed installation of \"data files\", "
"which are placed in a platform-specific location.  However, the most "
"common use case for data files distributed with a package is for use *by*"
" the package, usually by including the data files in the package "
"directory."
msgstr ""

#: ../../docs/setuptools.txt:869
msgid ""
"Setuptools offers three ways to specify data files to be included in your"
" packages.  First, you can simply use the ``include_package_data`` "
"keyword, e.g.::"
msgstr ""

#: ../../docs/setuptools.txt:879
msgid ""
"This tells setuptools to install any data files it finds in your "
"packages. The data files must be specified via the distutils' "
"``MANIFEST.in`` file. (They can also be tracked by a revision control "
"system, using an appropriate plugin.  See the section below on `Adding "
"Support for Revision Control Systems`_ for information on how to write "
"such plugins.)"
msgstr ""

#: ../../docs/setuptools.txt:885
msgid ""
"If you want finer-grained control over what files are included (for "
"example, if you have documentation files in your package directories and "
"want to exclude them from installation), then you can also use the "
"``package_data`` keyword, e.g.::"
msgstr ""

#: ../../docs/setuptools.txt:901
msgid ""
"The ``package_data`` argument is a dictionary that maps from package "
"names to lists of glob patterns.  The globs may include subdirectory "
"names, if the data files are contained in a subdirectory of the package."
"  For example, if the package tree looks like this::"
msgstr ""

#: ../../docs/setuptools.txt:915
msgid "The setuptools setup file might look like this::"
msgstr ""

#: ../../docs/setuptools.txt:932
msgid ""
"Notice that if you list patterns in ``package_data`` under the empty "
"string, these patterns are used to find files in every package, even ones"
" that also have their own patterns listed.  Thus, in the above example, "
"the ``mypkg.txt`` file gets included even though it's not listed in the "
"patterns for ``mypkg``."
msgstr ""

#: ../../docs/setuptools.txt:937
msgid ""
"Also notice that if you use paths, you *must* use a forward slash (``/``)"
" as the path separator, even if you are on Windows.  Setuptools "
"automatically converts slashes to appropriate platform-specific "
"separators at build time."
msgstr ""

#: ../../docs/setuptools.txt:941
msgid ""
"If datafiles are contained in a subdirectory of a package that isn't a "
"package itself (no ``__init__.py``), then the subdirectory names (or "
"``*``) are required in the ``package_data`` argument (as shown above with"
" ``'data/*.dat'``)."
msgstr ""

#: ../../docs/setuptools.txt:945
msgid ""
"When building an ``sdist``, the datafiles are also drawn from the "
"``package_name.egg-info/SOURCES.txt`` file, so make sure that this is "
"removed if the ``setup.py`` ``package_data`` list is updated before "
"calling ``setup.py``."
msgstr ""

#: ../../docs/setuptools.txt:949
msgid ""
"(Note: although the ``package_data`` argument was previously only "
"available in ``setuptools``, it was also added to the Python "
"``distutils`` package as of Python 2.4; there is `some documentation for "
"the feature`__ available on the python.org website.  If using the "
"setuptools-specific ``include_package_data`` argument, files specified by"
" ``package_data`` will *not* be automatically added to the manifest "
"unless they are listed in the MANIFEST.in file.)"
msgstr ""

#: ../../docs/setuptools.txt:958
msgid ""
"Sometimes, the ``include_package_data`` or ``package_data`` options alone"
" aren't sufficient to precisely define what files you want included.  For"
" example, you may want to include package README files in your revision "
"control system and source distributions, but exclude them from being "
"installed.  So, setuptools offers an ``exclude_package_data`` option as "
"well, that allows you to do things like this::"
msgstr ""

#: ../../docs/setuptools.txt:977
msgid ""
"The ``exclude_package_data`` option is a dictionary mapping package names"
" to lists of wildcard patterns, just like the ``package_data`` option.  "
"And, just as with that option, a key of ``''`` will apply the given "
"pattern(s) to all packages.  However, any files that match these patterns"
" will be *excluded* from installation, even if they were listed in "
"``package_data`` or were included as a result of using "
"``include_package_data``."
msgstr ""

#: ../../docs/setuptools.txt:984
msgid "In summary, the three options allow you to:"
msgstr ""

#: ../../docs/setuptools.txt:987
msgid "Accept all data files and directories matched by ``MANIFEST.in``."
msgstr ""

#: ../../docs/setuptools.txt:990
msgid ""
"Specify additional patterns to match files that may or may not be matched"
" by ``MANIFEST.in`` or found in source control."
msgstr ""

#: ../../docs/setuptools.txt:994
msgid ""
"Specify patterns for data files and directories that should *not* be "
"included when a package is installed, even if they would otherwise have "
"been included due to the use of the preceding options."
msgstr ""

#: ../../docs/setuptools.txt:998
msgid ""
"NOTE: Due to the way the distutils build process works, a data file that "
"you include in your project and then stop including may be \"orphaned\" "
"in your project's build directories, requiring you to run ``setup.py "
"clean --all`` to fully remove them.  This may also be important for your "
"users and contributors if they track intermediate revisions of your "
"project using Subversion; be sure to let them know when you make changes "
"that remove files from inclusion so they can run ``setup.py clean "
"--all``."
msgstr ""

#: ../../docs/setuptools.txt:1008
msgid "Accessing Data Files at Runtime"
msgstr ""

#: ../../docs/setuptools.txt:1010
msgid ""
"Typically, existing programs manipulate a package's ``__file__`` "
"attribute in order to find the location of data files.  However, this "
"manipulation isn't compatible with PEP 302-based import hooks, including "
"importing from zip files and Python Eggs.  It is strongly recommended "
"that, if you are using data files, you should use the "
":ref:`ResourceManager API` of ``pkg_resources`` to access them.  The "
"``pkg_resources`` module is distributed as part of setuptools, so if "
"you're using setuptools to distribute your package, there is no reason "
"not to use its resource management API.  See also `Accessing Package "
"Resources`_ for a quick example of converting code that uses ``__file__``"
" to use ``pkg_resources`` instead."
msgstr ""

#: ../../docs/setuptools.txt:1025
msgid "Non-Package Data Files"
msgstr ""

#: ../../docs/setuptools.txt:1027
msgid ""
"Historically, ``setuptools`` by way of ``easy_install`` would encapsulate"
" data files from the distribution into the egg (see `the old docs "
"<https://github.com/pypa/setuptools/blob/52aacd5b276fedd6849c3a648a0014f5da563e93/docs/setuptools.txt#L970-L1001>`_)."
" As eggs are deprecated and pip-based installs fall back to the platform-"
"specific location for installing data files, there is no supported "
"facility to reliably retrieve these resources."
msgstr ""

#: ../../docs/setuptools.txt:1033
msgid ""
"Instead, the PyPA recommends that any data files you wish to be "
"accessible at run time be included in the package."
msgstr ""

#: ../../docs/setuptools.txt:1038
msgid "Automatic Resource Extraction"
msgstr ""

#: ../../docs/setuptools.txt:1040
msgid ""
"If you are using tools that expect your resources to be \"real\" files, "
"or your project includes non-extension native libraries or other files "
"that your C extensions expect to be able to access, you may need to list "
"those files in the ``eager_resources`` argument to ``setup()``, so that "
"the files will be extracted together, whenever a C extension in the "
"project is imported."
msgstr ""

#: ../../docs/setuptools.txt:1046
msgid ""
"This is especially important if your project includes shared libraries "
"*other* than distutils-built C extensions, and those shared libraries use"
" file extensions other than ``.dll``, ``.so``, or ``.dylib``, which are "
"the extensions that setuptools 0.6a8 and higher automatically detects as "
"shared libraries and adds to the ``native_libs.txt`` file for you.  Any "
"shared libraries whose names do not end with one of those extensions "
"should be listed as ``eager_resources``, because they need to be present "
"in the filesystem when he C extensions that link to them are used."
msgstr ""

#: ../../docs/setuptools.txt:1055
msgid ""
"The ``pkg_resources`` runtime for compressed packages will automatically "
"extract *all* C extensions and ``eager_resources`` at the same time, "
"whenever *any* C extension or eager resource is requested via the "
"``resource_filename()`` API.  (C extensions are imported using "
"``resource_filename()`` internally.) This ensures that C extensions will "
"see all of the \"real\" files that they expect to see."
msgstr ""

#: ../../docs/setuptools.txt:1062
msgid ""
"Note also that you can list directory resource names in "
"``eager_resources`` as well, in which case the directory's contents "
"(including subdirectories) will be extracted whenever any C extension or "
"eager resource is requested."
msgstr ""

#: ../../docs/setuptools.txt:1066
msgid ""
"Please note that if you're not sure whether you need to use this "
"argument, you don't!  It's really intended to support projects with lots "
"of non-Python dependencies and as a last resort for crufty projects that "
"can't otherwise handle being compressed.  If your package is pure Python,"
" Python plus data files, or Python plus C, you really don't need this.  "
"You've got to be using either C or an external program that needs "
"\"real\" files in your project before there's any possibility of "
"``eager_resources`` being relevant to your project."
msgstr ""

#: ../../docs/setuptools.txt:1076
msgid "Extensible Applications and Frameworks"
msgstr ""

#: ../../docs/setuptools.txt:1082
msgid "Dynamic Discovery of Services and Plugins"
msgstr ""

#: ../../docs/setuptools.txt:1084
msgid ""
"``setuptools`` supports creating libraries that \"plug in\" to extensible"
" applications and frameworks, by letting you register \"entry points\" in"
" your project that can be imported by the application or framework."
msgstr ""

#: ../../docs/setuptools.txt:1088
msgid ""
"For example, suppose that a blogging tool wants to support plugins that "
"provide translation for various file types to the blog's output format. "
"The framework might define an \"entry point group\" called "
"``blogtool.parsers``, and then allow plugins to register entry points for"
" the file extensions they support."
msgstr ""

#: ../../docs/setuptools.txt:1094
msgid ""
"This would allow people to create distributions that contain one or more "
"parsers for different file types, and then the blogging tool would be "
"able to find the parsers at runtime by looking up an entry point for the "
"file extension (or mime type, or however it wants to)."
msgstr ""

#: ../../docs/setuptools.txt:1099
msgid ""
"Note that if the blogging tool includes parsers for certain file formats,"
" it can register these as entry points in its own setup script, which "
"means it doesn't have to special-case its built-in formats.  They can "
"just be treated the same as any other plugin's entry points would be."
msgstr ""

#: ../../docs/setuptools.txt:1104
msgid ""
"If you're creating a project that plugs in to an existing application or "
"framework, you'll need to know what entry points or entry point groups "
"are defined by that application or framework.  Then, you can register "
"entry points in your setup script.  Here are a few examples of ways you "
"might register an ``.rst`` file parser entry point in the "
"``blogtool.parsers`` entry point group, for our hypothetical blogging "
"tool::"
msgstr ""

#: ../../docs/setuptools.txt:1130
msgid ""
"The ``entry_points`` argument to ``setup()`` accepts either a string with"
" ``.ini``-style sections, or a dictionary mapping entry point group names"
" to either strings or lists of strings containing entry point specifiers."
"  An entry point specifier consists of a name and value, separated by an "
"``=`` sign.  The value consists of a dotted module name, optionally "
"followed by a ``:`` and a dotted identifier naming an object within the "
"module.  It can also include a bracketed list of \"extras\" that are "
"required for the entry point to be used.  When the invoking application "
"or framework requests loading of an entry point, any requirements implied"
" by the associated extras will be passed to ``pkg_resources.require()``, "
"so that an appropriate error message can be displayed if the needed "
"package(s) are missing.  (Of course, the invoking app or framework can "
"ignore such errors if it wants to make an entry point optional if a "
"requirement isn't installed.)"
msgstr ""

#: ../../docs/setuptools.txt:1146
msgid "Defining Additional Metadata"
msgstr ""

#: ../../docs/setuptools.txt:1148
msgid ""
"Some extensible applications and frameworks may need to define their own "
"kinds of metadata to include in eggs, which they can then access using "
"the ``pkg_resources`` metadata APIs.  Ordinarily, this is done by having "
"plugin developers include additional files in their ``ProjectName.egg-"
"info`` directory.  However, since it can be tedious to create such files "
"by hand, you may want to create a distutils extension that will create "
"the necessary files from arguments to ``setup()``, in much the same way "
"that ``setuptools`` does for many of the ``setup()`` arguments it adds.  "
"See the section below on `Creating distutils Extensions`_ for more "
"details, especially the subsection on `Adding new EGG-INFO Files`_."
msgstr ""

#: ../../docs/setuptools.txt:1161
msgid "\"Development Mode\""
msgstr ""

#: ../../docs/setuptools.txt:1163
msgid ""
"Under normal circumstances, the ``distutils`` assume that you are going "
"to build a distribution of your project, not use it in its \"raw\" or "
"\"unbuilt\" form.  If you were to use the ``distutils`` that way, you "
"would have to rebuild and reinstall your project every time you made a "
"change to it during development."
msgstr ""

#: ../../docs/setuptools.txt:1169
msgid ""
"Another problem that sometimes comes up with the ``distutils`` is that "
"you may need to do development on two related projects at the same time."
"  You may need to put both projects' packages in the same directory to "
"run them, but need to keep them separate for revision control purposes.  "
"How can you do this?"
msgstr ""

#: ../../docs/setuptools.txt:1174
msgid ""
"Setuptools allows you to deploy your projects for use in a common "
"directory or staging area, but without copying any files.  Thus, you can "
"edit each project's code in its checkout directory, and only need to run "
"build commands when you change a project's C extensions or similarly "
"compiled files.  You can even deploy a project into another project's "
"checkout directory, if that's your preferred way of working (as opposed "
"to using a common independent staging area or the site-packages "
"directory)."
msgstr ""

#: ../../docs/setuptools.txt:1182
msgid ""
"To do this, use the ``setup.py develop`` command.  It works very "
"similarly to ``setup.py install`` or the EasyInstall tool, except that it"
" doesn't actually install anything.  Instead, it creates a special "
"``.egg-link`` file in the deployment directory, that links to your "
"project's source code.  And, if your deployment directory is Python's "
"``site-packages`` directory, it will also update the ``easy-install.pth``"
" file to include your project's source code, thereby making it available "
"on ``sys.path`` for all programs using that Python installation."
msgstr ""

#: ../../docs/setuptools.txt:1191
msgid ""
"If you have enabled the ``use_2to3`` flag, then of course the ``.egg-"
"link`` will not link directly to your source code when run under Python "
"3, since that source code would be made for Python 2 and not work under "
"Python 3. Instead the ``setup.py develop`` will build Python 3 code under"
" the ``build`` directory, and link there. This means that after doing "
"code changes you will have to run ``setup.py build`` before these changes"
" are picked up by your Python 3 installation."
msgstr ""

#: ../../docs/setuptools.txt:1199
msgid ""
"In addition, the ``develop`` command creates wrapper scripts in the "
"target script directory that will run your in-development scripts after "
"ensuring that all your ``install_requires`` packages are available on "
"``sys.path``."
msgstr ""

#: ../../docs/setuptools.txt:1203
msgid ""
"You can deploy the same project to multiple staging areas, e.g. if you "
"have multiple projects on the same machine that are sharing the same "
"project you're doing development work."
msgstr ""

#: ../../docs/setuptools.txt:1207
msgid ""
"When you're done with a given development task, you can remove the "
"project source from a staging area using ``setup.py develop "
"--uninstall``, specifying the desired staging area if it's not the "
"default."
msgstr ""

#: ../../docs/setuptools.txt:1211
msgid ""
"There are several options to control the precise behavior of the "
"``develop`` command; see the section on the `develop`_ command below for "
"more details."
msgstr ""

#: ../../docs/setuptools.txt:1214
msgid ""
"Note that you can also apply setuptools commands to non-setuptools "
"projects, using commands like this::"
msgstr ""

#: ../../docs/setuptools.txt:1219
msgid ""
"That is, you can simply list the normal setup commands and options "
"following the quoted part."
msgstr ""

#: ../../docs/setuptools.txt:1224
msgid "Distributing a ``setuptools``-based project"
msgstr ""

#: ../../docs/setuptools.txt:1226
msgid ""
"Detailed instructions to distribute a setuptools project can be found at "
"`Packaging project tutorials`_."
msgstr ""

#: ../../docs/setuptools.txt:1231
msgid ""
"Before you begin, make sure you have the latest versions of setuptools "
"and wheel::"
msgstr ""

#: ../../docs/setuptools.txt:1235
msgid ""
"To build a setuptools project, run this command from the same directory "
"where setup.py is located::"
msgstr ""

#: ../../docs/setuptools.txt:1240
msgid "This will generate distribution archives in the `dist` directory."
msgstr ""

#: ../../docs/setuptools.txt:1242
msgid ""
"Before you upload the generated archives make sure you're registered on "
"https://test.pypi.org/account/register/. You will also need to verify "
"your email to be able to upload any packages. You should install twine to"
" be able to upload packages::"
msgstr ""

#: ../../docs/setuptools.txt:1249
msgid "Now, to upload these archives, run::"
msgstr ""

#: ../../docs/setuptools.txt:1253
msgid "To install your newly uploaded package ``example_pkg``,  you can use pip::"
msgstr ""

#: ../../docs/setuptools.txt:1257
msgid ""
"If you have issues at any point, please refer to `Packaging project "
"tutorials`_ for clarification."
msgstr ""

#: ../../docs/setuptools.txt:1261
msgid "Distributing legacy ``setuptools`` projects using ez_setup.py"
msgstr ""

#: ../../docs/setuptools.txt:1263
msgid "**ez_setup** is deprecated in favor of PIP with **PEP-518** support."
msgstr ""

#: ../../docs/setuptools.txt:1265
msgid ""
"Distributing packages using the legacy ``ez_setup.py`` and "
"``easy_install`` is deprecated in favor of PIP. Please consider migrating"
" to using pip and twine based distribution."
msgstr ""

#: ../../docs/setuptools.txt:1269
msgid ""
"However, if you still have any ``ez_setup`` based packages, documentation"
" for ez_setup based distributions can be found at `ez_setup distribution "
"guide`_."
msgstr ""

#: ../../docs/setuptools.txt:1275
msgid "Setting the ``zip_safe`` flag"
msgstr ""

#: ../../docs/setuptools.txt:1277
msgid ""
"For some use cases (such as bundling as part of a larger application), "
"Python packages may be run directly from a zip file. Not all packages, "
"however, are capable of running in compressed form, because they may "
"expect to be able to access either source code or data files as normal "
"operating system files.  So, ``setuptools`` can install your project as a"
" zipfile or a directory, and its default choice is determined by the "
"project's ``zip_safe`` flag."
msgstr ""

#: ../../docs/setuptools.txt:1285
msgid ""
"You can pass a True or False value for the ``zip_safe`` argument to the "
"``setup()`` function, or you can omit it.  If you omit it, the "
"``bdist_egg`` command will analyze your project's contents to see if it "
"can detect any conditions that would prevent it from working in a "
"zipfile.  It will output notices to the console about any such conditions"
" that it finds."
msgstr ""

#: ../../docs/setuptools.txt:1291
msgid ""
"Currently, this analysis is extremely conservative: it will consider the "
"project unsafe if it contains any C extensions or datafiles whatsoever.  "
"This does *not* mean that the project can't or won't work as a zipfile!  "
"It just means that the ``bdist_egg`` authors aren't yet comfortable "
"asserting that the project *will* work.  If the project contains no C or "
"data files, and does no ``__file__`` or ``__path__`` introspection or "
"source code manipulation, then there is an extremely solid chance the "
"project will work when installed as a zipfile.  (And if the project uses "
"``pkg_resources`` for all its data file access, then C extensions and "
"other data files shouldn't be a problem at all. See the `Accessing Data "
"Files at Runtime`_ section above for more information.)"
msgstr ""

#: ../../docs/setuptools.txt:1302
msgid ""
"However, if ``bdist_egg`` can't be *sure* that your package will work, "
"but you've checked over all the warnings it issued, and you are either "
"satisfied it *will* work (or if you want to try it for yourself), then "
"you should set ``zip_safe`` to ``True`` in your ``setup()`` call.  If it "
"turns out that it doesn't work, you can always change it to ``False``, "
"which will force ``setuptools`` to install your project as a directory "
"rather than as a zipfile."
msgstr ""

#: ../../docs/setuptools.txt:1309
msgid ""
"Of course, the end-user can still override either decision, if they are "
"using EasyInstall to install your package.  And, if you want to override "
"for testing purposes, you can just run ``setup.py easy_install --zip-ok "
".`` or ``setup.py easy_install --always-unzip .`` in your project "
"directory. to install the package as a zipfile or directory, "
"respectively."
msgstr ""

#: ../../docs/setuptools.txt:1315
msgid ""
"In the future, as we gain more experience with different packages and "
"become more satisfied with the robustness of the ``pkg_resources`` "
"runtime, the \"zip safety\" analysis may become less conservative.  "
"However, we strongly recommend that you determine for yourself whether "
"your project functions correctly when installed as a zipfile, correct any"
" problems if you can, and then make an explicit declaration of ``True`` "
"or ``False`` for the ``zip_safe`` flag, so that it will not be necessary "
"for ``bdist_egg`` or ``EasyInstall`` to try to guess whether your project"
" can work as a zipfile."
msgstr ""

#: ../../docs/setuptools.txt:1327
msgid "Namespace Packages"
msgstr ""

#: ../../docs/setuptools.txt:1329
msgid ""
"Sometimes, a large package is more useful if distributed as a collection "
"of smaller eggs.  However, Python does not normally allow the contents of"
" a package to be retrieved from more than one location.  \"Namespace "
"packages\" are a solution for this problem.  When you declare a package "
"to be a namespace package, it means that the package has no meaningful "
"contents in its ``__init__.py``, and that it is merely a container for "
"modules and subpackages."
msgstr ""

#: ../../docs/setuptools.txt:1336
msgid ""
"The ``pkg_resources`` runtime will then automatically ensure that the "
"contents of namespace packages that are spread over multiple eggs or "
"directories are combined into a single \"virtual\" package."
msgstr ""

#: ../../docs/setuptools.txt:1340
msgid ""
"The ``namespace_packages`` argument to ``setup()`` lets you declare your "
"project's namespace packages, so that they will be included in your "
"project's metadata.  The argument should list the namespace packages that"
" the egg participates in.  For example, the ZopeInterface project might "
"do this::"
msgstr ""

#: ../../docs/setuptools.txt:1350
msgid ""
"because it contains a ``zope.interface`` package that lives in the "
"``zope`` namespace package.  Similarly, a project for a standalone "
"``zope.publisher`` would also declare the ``zope`` namespace package.  "
"When these projects are installed and used, Python will see them both as "
"part of a \"virtual\" ``zope`` package, even though they will be "
"installed in different locations."
msgstr ""

#: ../../docs/setuptools.txt:1356
msgid ""
"Namespace packages don't have to be top-level packages.  For example, "
"Zope 3's ``zope.app`` package is a namespace package, and in the future "
"PEAK's ``peak.util`` package will be too."
msgstr ""

#: ../../docs/setuptools.txt:1360
msgid ""
"Note, by the way, that your project's source tree must include the "
"namespace packages' ``__init__.py`` files (and the ``__init__.py`` of any"
" parent packages), in a normal Python package layout.  These "
"``__init__.py`` files *must* contain the line::"
msgstr ""

#: ../../docs/setuptools.txt:1367
msgid ""
"This code ensures that the namespace package machinery is operating and "
"that the current package is registered as a namespace package."
msgstr ""

#: ../../docs/setuptools.txt:1370
msgid ""
"You must NOT include any other code and data in a namespace package's "
"``__init__.py``.  Even though it may appear to work during development, "
"or when projects are installed as ``.egg`` files, it will not work when "
"the projects are installed using \"system\" packaging tools -- in such "
"cases the ``__init__.py`` files will not be installed, let alone "
"executed."
msgstr ""

#: ../../docs/setuptools.txt:1376
msgid ""
"You must include the ``declare_namespace()``  line in the ``__init__.py``"
" of *every* project that has contents for the namespace package in "
"question, in order to ensure that the namespace will be declared "
"regardless of which project's copy of ``__init__.py`` is loaded first.  "
"If the first loaded ``__init__.py`` doesn't declare it, it will never "
"*be* declared, because no other copies will ever be loaded!"
msgstr ""

#: ../../docs/setuptools.txt:1385
msgid "TRANSITIONAL NOTE"
msgstr ""

#: ../../docs/setuptools.txt:1387
msgid ""
"Setuptools automatically calls ``declare_namespace()`` for you at "
"runtime, but future versions may *not*.  This is because the automatic "
"declaration feature has some negative side effects, such as needing to "
"import all namespace packages during the initialization of the "
"``pkg_resources`` runtime, and also the need for ``pkg_resources`` to be "
"explicitly imported before any namespace packages work at all.  In some "
"future releases, you'll be responsible for including your own declaration"
" lines, and the automatic declaration feature will be dropped to get rid "
"of the negative side effects."
msgstr ""

#: ../../docs/setuptools.txt:1396
msgid ""
"During the remainder of the current development cycle, therefore, "
"setuptools will warn you about missing ``declare_namespace()`` calls in "
"your ``__init__.py`` files, and you should correct these as soon as "
"possible before the compatibility support is removed. Namespace packages "
"without declaration lines will not work correctly once a user has "
"upgraded to a later version, so it's important that you make this change "
"now in order to avoid having your code break in the field. Our apologies "
"for the inconvenience, and thank you for your patience."
msgstr ""

#: ../../docs/setuptools.txt:1408
msgid "Tagging and \"Daily Build\" or \"Snapshot\" Releases"
msgstr ""

#: ../../docs/setuptools.txt:1410
msgid ""
"When a set of related projects are under development, it may be important"
" to track finer-grained version increments than you would normally use "
"for e.g. \"stable\" releases.  While stable releases might be measured in"
" dotted numbers with alpha/beta/etc. status codes, development versions "
"of a project often need to be tracked by revision or build number or even"
" build date.  This is especially true when projects in development need "
"to refer to one another, and therefore may literally need an up-to-the-"
"minute version of something!"
msgstr ""

#: ../../docs/setuptools.txt:1418
msgid ""
"To support these scenarios, ``setuptools`` allows you to \"tag\" your "
"source and egg distributions by adding one or more of the following to "
"the project's \"official\" version identifier:"
msgstr ""

#: ../../docs/setuptools.txt:1422
msgid ""
"A manually-specified pre-release tag, such as \"build\" or \"dev\", or a "
"manually-specified post-release tag, such as a build or revision number "
"(``--tag-build=STRING, -bSTRING``)"
msgstr ""

#: ../../docs/setuptools.txt:1426
msgid ""
"An 8-character representation of the build date (``--tag-date, -d``), as "
"a postrelease tag"
msgstr ""

#: ../../docs/setuptools.txt:1429
msgid ""
"You can add these tags by adding ``egg_info`` and the desired options to "
"the command line ahead of the ``sdist`` or ``bdist`` commands that you "
"want to generate a daily build or snapshot for.  See the section below on"
" the `egg_info`_ command for more details."
msgstr ""

#: ../../docs/setuptools.txt:1434
msgid ""
"(Also, before you release your project, be sure to see the section above "
"on `Specifying Your Project's Version`_ for more information about how "
"pre- and post-release tags affect how setuptools and EasyInstall "
"interpret version numbers.  This is important in order to make sure that "
"dependency processing tools will know which versions of your project are "
"newer than others.)"
msgstr ""

#: ../../docs/setuptools.txt:1440
msgid ""
"Finally, if you are creating builds frequently, and either building them "
"in a downloadable location or are copying them to a distribution server, "
"you should probably also check out the `rotate`_ command, which lets you "
"automatically delete all but the N most-recently-modified distributions "
"matching a glob pattern.  So, you can use a command line like::"
msgstr ""

#: ../../docs/setuptools.txt:1448
msgid ""
"to build an egg whose version info includes 'DEV-rNNNN' (where NNNN is "
"the most recent Subversion revision that affected the source tree), and "
"then delete any egg files from the distribution directory except for the "
"three that were built most recently."
msgstr ""

#: ../../docs/setuptools.txt:1453
msgid ""
"If you have to manage automated builds for multiple packages, each with "
"different tagging and rotation policies, you may also want to check out "
"the `alias`_ command, which would let each package define an alias like "
"``daily`` that would perform the necessary tag, build, and rotate "
"commands.  Then, a simpler script or cron job could just run ``setup.py "
"daily`` in each project directory.  (And, you could also define sitewide "
"or per-user default versions of the ``daily`` alias, so that projects "
"that didn't define their own would use the appropriate defaults.)"
msgstr ""

#: ../../docs/setuptools.txt:1464
msgid "Generating Source Distributions"
msgstr ""

#: ../../docs/setuptools.txt:1466
msgid ""
"``setuptools`` enhances the distutils' default algorithm for source file "
"selection with pluggable endpoints for looking up files to include. If "
"you are using a revision control system, and your source distributions "
"only need to include files that you're tracking in revision control, use "
"a corresponding plugin instead of writing a ``MANIFEST.in`` file. See the"
" section below on `Adding Support for Revision Control Systems`_ for "
"information on plugins."
msgstr ""

#: ../../docs/setuptools.txt:1473
msgid ""
"If you need to include automatically generated files, or files that are "
"kept in an unsupported revision control system, you'll need to create a "
"``MANIFEST.in`` file to specify any files that the default file location "
"algorithm doesn't catch.  See the distutils documentation for more "
"information on the format of the ``MANIFEST.in`` file."
msgstr ""

#: ../../docs/setuptools.txt:1479
msgid ""
"But, be sure to ignore any part of the distutils documentation that deals"
" with ``MANIFEST`` or how it's generated from ``MANIFEST.in``; setuptools"
" shields you from these issues and doesn't work the same way in any case."
"  Unlike the distutils, setuptools regenerates the source distribution "
"manifest file every time you build a source distribution, and it builds "
"it inside the project's ``.egg-info`` directory, out of the way of your "
"main project directory.  You therefore need not worry about whether it is"
" up-to-date or not."
msgstr ""

#: ../../docs/setuptools.txt:1487
msgid ""
"Indeed, because setuptools' approach to determining the contents of a "
"source distribution is so much simpler, its ``sdist`` command omits "
"nearly all of the options that the distutils' more complex ``sdist`` "
"process requires.  For all practical purposes, you'll probably use only "
"the ``--formats`` option, if you use any option at all."
msgstr ""

#: ../../docs/setuptools.txt:1495
msgid "Making your package available for EasyInstall"
msgstr ""

#: ../../docs/setuptools.txt:1497
msgid ""
"There may be reasons why you don't want to upload distributions to PyPI, "
"and just want your existing distributions (or perhaps a Subversion "
"checkout) to be used instead."
msgstr ""

#: ../../docs/setuptools.txt:1501
msgid "There are three ``setup()`` arguments that affect EasyInstall:"
msgstr ""

#: ../../docs/setuptools.txt:1507
msgid "``url`` and ``download_url``"
msgstr ""

#: ../../docs/setuptools.txt:1504
msgid ""
"These become links on your project's PyPI page.  EasyInstall will examine"
" them to see if they link to a package (\"primary links\"), or whether "
"they are HTML pages.  If they're HTML pages, EasyInstall scans all HREF's"
" on the page for primary links"
msgstr ""

#: ../../docs/setuptools.txt:1511
msgid "``long_description``"
msgstr ""

#: ../../docs/setuptools.txt:1510
msgid ""
"EasyInstall will check any URLs contained in this argument to see if they"
" are primary links."
msgstr ""

#: ../../docs/setuptools.txt:1513
msgid ""
"A URL is considered a \"primary link\" if it is a link to a .tar.gz, "
".tgz, .zip, .egg, .egg.zip, .tar.bz2, or .exe file, or if it has an "
"``#egg=project`` or ``#egg=project-version`` fragment identifier attached"
" to it.  EasyInstall attempts to determine a project name and optional "
"version number from the text of a primary link *without* downloading it."
"  When it has found all the primary links, EasyInstall will select the "
"best match based on requested version, platform compatibility, and other "
"criteria."
msgstr ""

#: ../../docs/setuptools.txt:1521
msgid ""
"So, if your ``url`` or ``download_url`` point either directly to a "
"downloadable source distribution, or to HTML page(s) that have direct "
"links to such, then EasyInstall will be able to locate downloads "
"automatically.  If you want to make Subversion checkouts available, then "
"you should create links with either ``#egg=project`` or ``#egg=project-"
"version`` added to the URL.  You should replace ``project`` and "
"``version`` with the values they would have in an egg filename.  (Be sure"
" to actually generate an egg and then use the initial part of the "
"filename, rather than trying to guess what the escaped form of the "
"project name and version number will be.)"
msgstr ""

#: ../../docs/setuptools.txt:1531
msgid ""
"Note that Subversion checkout links are of lower precedence than other "
"kinds of distributions, so EasyInstall will not select a Subversion "
"checkout for downloading unless it has a version included in the "
"``#egg=`` suffix, and it's a higher version than EasyInstall has seen in "
"any other links for your project."
msgstr ""

#: ../../docs/setuptools.txt:1537
msgid ""
"As a result, it's a common practice to use mark checkout URLs with a "
"version of \"dev\" (i.e., ``#egg=projectname-dev``), so that users can do"
" something like this::"
msgstr ""

#: ../../docs/setuptools.txt:1543
msgid "in order to check out the in-development version of ``projectname``."
msgstr ""

#: ../../docs/setuptools.txt:1547
msgid "Making \"Official\" (Non-Snapshot) Releases"
msgstr ""

#: ../../docs/setuptools.txt:1549
msgid ""
"When you make an official release, creating source or binary "
"distributions, you will need to override the tag settings from "
"``setup.cfg``, so that you don't end up registering versions like "
"``foobar-0.7a1.dev-r34832``.  This is easy to do if you are developing on"
" the trunk and using tags or branches for your releases - just make the "
"change to ``setup.cfg`` after branching or tagging the release, so the "
"trunk will still produce development snapshots."
msgstr ""

#: ../../docs/setuptools.txt:1556
msgid ""
"Alternately, if you are not branching for releases, you can override the "
"default version options on the command line, using something like::"
msgstr ""

#: ../../docs/setuptools.txt:1561
msgid ""
"The first part of this command (``egg_info -Db \"\"``) will override the "
"configured tag information, before creating source and binary eggs. Thus,"
" these commands will use the plain version from your ``setup.py``, "
"without adding the build designation string."
msgstr ""

#: ../../docs/setuptools.txt:1566
msgid ""
"Of course, if you will be doing this a lot, you may wish to create a "
"personal alias for this operation, e.g.::"
msgstr ""

#: ../../docs/setuptools.txt:1571
msgid "You can then use it like this::"
msgstr ""

#: ../../docs/setuptools.txt:1575
msgid ""
"Or of course you can create more elaborate aliases that do all of the "
"above. See the sections below on the `egg_info`_ and `alias`_ commands "
"for more ideas."
msgstr ""

#: ../../docs/setuptools.txt:1581
msgid "Distributing Extensions compiled with Cython"
msgstr ""

#: ../../docs/setuptools.txt:1583
msgid ""
"``setuptools`` will detect at build time whether Cython is installed or "
"not. If Cython is not found ``setuptools`` will ignore pyx files."
msgstr ""

#: ../../docs/setuptools.txt:1586
msgid ""
"To ensure Cython is available, include Cython in the build-requires "
"section of your pyproject.toml::"
msgstr ""

#: ../../docs/setuptools.txt:1592
msgid ""
"Built with pip 10 or later, that declaration is sufficient to include "
"Cython in the build. For broader compatibility, declare the dependency in"
" your setup-requires of setup.cfg::"
msgstr ""

#: ../../docs/setuptools.txt:1601
msgid ""
"As long as Cython is present in the build environment, ``setuptools`` "
"includes transparent support for building Cython extensions, as long as "
"extensions are defined using ``setuptools.Extension``."
msgstr ""

#: ../../docs/setuptools.txt:1605
msgid ""
"If you follow these rules, you can safely list ``.pyx`` files as the "
"source of your ``Extension`` objects in the setup script.  If it is, then"
" ``setuptools`` will use it."
msgstr ""

#: ../../docs/setuptools.txt:1609
msgid ""
"Of course, for this to work, your source distributions must include the C"
" code generated by Cython, as well as your original ``.pyx`` files.  This"
" means that you will probably want to include current ``.c`` files in "
"your revision control system, rebuilding them whenever you check changes "
"in for the ``.pyx`` source files.  This will ensure that people tracking "
"your project in a revision control system will be able to build it even "
"if they don't have Cython installed, and that your source releases will "
"be similarly usable with or without Cython."
msgstr ""

#: ../../docs/setuptools.txt:1621
msgid "Command Reference"
msgstr ""

#: ../../docs/setuptools.txt:1626
msgid "``alias`` - Define shortcuts for commonly used commands"
msgstr ""

#: ../../docs/setuptools.txt:1628
msgid ""
"Sometimes, you need to use the same commands over and over, but you can't"
" necessarily set them as defaults.  For example, if you produce both "
"development snapshot releases and \"stable\" releases of a project, you "
"may want to put the distributions in different places, or use different "
"``egg_info`` tagging options, etc.  In these cases, it doesn't make sense"
" to set the options in a distutils configuration file, because the values"
" of the options changed based on what you're trying to do."
msgstr ""

#: ../../docs/setuptools.txt:1636
msgid ""
"Setuptools therefore allows you to define \"aliases\" - shortcut names "
"for an arbitrary string of commands and options, using ``setup.py alias "
"aliasname expansion``, where aliasname is the name of the new alias, and "
"the remainder of the command line supplies its expansion.  For example, "
"this command defines a sitewide alias called \"daily\", that sets various"
" ``egg_info`` tagging options::"
msgstr ""

#: ../../docs/setuptools.txt:1645
msgid ""
"Once the alias is defined, it can then be used with other setup commands,"
" e.g.::"
msgstr ""

#: ../../docs/setuptools.txt:1652
msgid ""
"The above commands are interpreted as if the word ``daily`` were replaced"
" with ``egg_info --tag-build=development``."
msgstr ""

#: ../../docs/setuptools.txt:1655
msgid ""
"Note that setuptools will expand each alias *at most once* in a given "
"command line.  This serves two purposes.  First, if you accidentally "
"create an alias loop, it will have no effect; you'll instead get an error"
" message about an unknown command.  Second, it allows you to define an "
"alias for a command, that uses that command.  For example, this (project-"
"local) alias::"
msgstr ""

#: ../../docs/setuptools.txt:1663
msgid ""
"redefines the ``bdist_egg`` command so that it always runs the ``rotate``"
" command afterwards to delete all but the newest egg file.  It doesn't "
"loop indefinitely on ``bdist_egg`` because the alias is only expanded "
"once when used."
msgstr ""

#: ../../docs/setuptools.txt:1668
msgid ""
"You can remove a defined alias with the ``--remove`` (or ``-r``) option, "
"e.g.::"
msgstr ""

#: ../../docs/setuptools.txt:1672
msgid "would delete the \"daily\" alias we defined above."
msgstr ""

#: ../../docs/setuptools.txt:1674
msgid ""
"Aliases can be defined on a project-specific, per-user, or sitewide "
"basis.  The default is to define or remove a project-specific alias, but "
"you can use any of the `configuration file options`_ (listed under the "
"`saveopts`_ command, below) to determine which distutils configuration "
"file an aliases will be added to (or removed from)."
msgstr ""

#: ../../docs/setuptools.txt:1680
msgid ""
"Note that if you omit the \"expansion\" argument to the ``alias`` "
"command, you'll get output showing that alias' current definition (and "
"what configuration file it's defined in).  If you omit the alias name as "
"well, you'll get a listing of all current aliases along with their "
"configuration file locations."
msgstr ""

#: ../../docs/setuptools.txt:1688
msgid "``bdist_egg`` - Create a Python Egg for the project"
msgstr ""

#: ../../docs/setuptools.txt:1690
msgid ""
"This command generates a Python Egg (``.egg`` file) for the project.  "
"Python Eggs are the preferred binary distribution format for EasyInstall,"
" because they are cross-platform (for \"pure\" packages), directly "
"importable, and contain project metadata including scripts and "
"information about the project's dependencies.  They can be simply "
"downloaded and added to ``sys.path`` directly, or they can be placed in a"
" directory on ``sys.path`` and then automatically discovered by the egg "
"runtime system."
msgstr ""

#: ../../docs/setuptools.txt:1698
msgid ""
"This command runs the `egg_info`_ command (if it hasn't already run) to "
"update the project's metadata (``.egg-info``) directory.  If you have "
"added any extra metadata files to the ``.egg-info`` directory, those "
"files will be included in the new egg file's metadata directory, for use "
"by the egg runtime system or by any applications or frameworks that use "
"that metadata."
msgstr ""

#: ../../docs/setuptools.txt:1704
msgid ""
"You won't usually need to specify any special options for this command; "
"just use ``bdist_egg`` and you're done.  But there are a few options that"
" may be occasionally useful:"
msgstr ""

#: ../../docs/setuptools.txt:1712 ../../docs/setuptools.txt:2017
msgid "``--dist-dir=DIR, -d DIR``"
msgstr ""

#: ../../docs/setuptools.txt:1709
msgid ""
"Set the directory where the ``.egg`` file will be placed.  If you don't "
"supply this, then the ``--dist-dir`` setting of the ``bdist`` command "
"will be used, which is usually a directory named ``dist`` in the project "
"directory."
msgstr ""

#: ../../docs/setuptools.txt:1723
msgid "``--plat-name=PLATFORM, -p PLATFORM``"
msgstr ""

#: ../../docs/setuptools.txt:1715
msgid ""
"Set the platform name string that will be embedded in the egg's filename "
"(assuming the egg contains C extensions).  This can be used to override "
"the distutils default platform name with something more meaningful.  Keep"
" in mind, however, that the egg runtime system expects to see eggs with "
"distutils platform names, so it may ignore or reject eggs with non-"
"standard platform names.  Similarly, the EasyInstall program may ignore "
"them when searching web pages for download links.  However, if you are "
"cross-compiling or doing some other unusual things, you might find a use "
"for this option."
msgstr ""

#: ../../docs/setuptools.txt:1736
msgid "``--exclude-source-files``"
msgstr ""

#: ../../docs/setuptools.txt:1726
msgid ""
"Don't include any modules' ``.py`` files in the egg, just compiled "
"Python, C, and data files.  (Note that this doesn't affect any ``.py`` "
"files in the EGG-INFO directory or its subdirectories, since for example "
"there may be scripts with a ``.py`` extension which must still be "
"retained.)  We don't recommend that you use this option except for "
"packages that are being bundled for proprietary end-user applications, or"
" for \"embedded\" scenarios where space is at an absolute premium.  On "
"the other hand, if your package is going to be installed and used in "
"compressed form, you might as well exclude the source because Python's "
"``traceback`` module doesn't currently understand how to display zipped "
"source code anyway, or how to deal with files that are in a different "
"place from where their code was compiled."
msgstr ""

#: ../../docs/setuptools.txt:1738
msgid ""
"There are also some options you will probably never need, but which are "
"there because they were copied from similar ``bdist`` commands used as an"
" example for creating this one.  They may be useful for testing and "
"debugging, however, which is why we kept them:"
msgstr ""

#: ../../docs/setuptools.txt:1745
msgid "``--keep-temp, -k``"
msgstr ""

#: ../../docs/setuptools.txt:1744
msgid ""
"Keep the contents of the ``--bdist-dir`` tree around after creating the "
"``.egg`` file."
msgstr ""

#: ../../docs/setuptools.txt:1751
msgid "``--bdist-dir=DIR, -b DIR``"
msgstr ""

#: ../../docs/setuptools.txt:1748
msgid ""
"Set the temporary directory for creating the distribution.  The entire "
"contents of this directory are zipped to create the ``.egg`` file, after "
"running various installation commands to copy the package's modules, "
"data, and extensions here."
msgstr ""

#: ../../docs/setuptools.txt:1756
msgid "``--skip-build``"
msgstr ""

#: ../../docs/setuptools.txt:1754
msgid ""
"Skip doing any \"build\" commands; just go straight to the install-and-"
"compress phases."
msgstr ""

#: ../../docs/setuptools.txt:1761
msgid "``develop`` - Deploy the project source in \"Development Mode\""
msgstr ""

#: ../../docs/setuptools.txt:1763
msgid ""
"This command allows you to deploy your project's source for use in one or"
" more \"staging areas\" where it will be available for importing.  This "
"deployment is done in such a way that changes to the project source are "
"immediately available in the staging area(s), without needing to run a "
"build or install step after each change."
msgstr ""

#: ../../docs/setuptools.txt:1769
msgid ""
"The ``develop`` command works by creating an ``.egg-link`` file (named "
"for the project) in the given staging area.  If the staging area is "
"Python's ``site-packages`` directory, it also updates an ``easy-"
"install.pth`` file so that the project is on ``sys.path`` by default for "
"all programs run using that Python installation."
msgstr ""

#: ../../docs/setuptools.txt:1775
msgid ""
"The ``develop`` command also installs wrapper scripts in the staging area"
" (or a separate directory, as specified) that will ensure the project's "
"dependencies are available on ``sys.path`` before running the project's "
"source scripts. And, it ensures that any missing project dependencies are"
" available in the staging area, by downloading and installing them if "
"necessary."
msgstr ""

#: ../../docs/setuptools.txt:1781
msgid ""
"Last, but not least, the ``develop`` command invokes the ``build_ext -i``"
" command to ensure any C extensions in the project have been built and "
"are up-to-date, and the ``egg_info`` command to ensure the project's "
"metadata is updated (so that the runtime and wrappers know what the "
"project's dependencies are).  If you make any changes to the project's "
"setup script or C extensions, you should rerun the ``develop`` command "
"against all relevant staging areas to keep the project's scripts, "
"metadata and extensions up-to-date.  Most other kinds of changes to your "
"project should not require any build operations or rerunning ``develop``,"
" but keep in mind that even minor changes to the setup script (e.g. "
"changing an entry point definition) require you to re-run the ``develop``"
" or ``test`` commands to keep the distribution updated."
msgstr ""

#: ../../docs/setuptools.txt:1793
msgid ""
"Here are some of the options that the ``develop`` command accepts.  Note "
"that they affect the project's dependencies as well as the project "
"itself, so if you have dependencies that need to be installed and you use"
" ``--exclude-scripts`` (for example), the dependencies' scripts will not "
"be installed either!  For this reason, you may want to use EasyInstall to"
" install the project's dependencies before using the ``develop`` command,"
" if you need finer control over the installation options for "
"dependencies."
msgstr ""

#: ../../docs/setuptools.txt:1812
msgid "``--uninstall, -u``"
msgstr ""

#: ../../docs/setuptools.txt:1802
msgid ""
"Un-deploy the current project.  You may use the ``--install-dir`` or "
"``-d`` option to designate the staging area.  The created ``.egg-link`` "
"file will be removed, if present and it is still pointing to the project "
"directory. The project directory will be removed from ``easy-"
"install.pth`` if the staging area is Python's ``site-packages`` "
"directory."
msgstr ""

#: ../../docs/setuptools.txt:1808
msgid ""
"Note that this option currently does *not* uninstall script wrappers!  "
"You must uninstall them yourself, or overwrite them by using EasyInstall "
"to activate a different version of the package.  You can also avoid "
"installing script wrappers in the first place, if you use the "
"``--exclude-scripts`` (aka ``-x``) option when you run ``develop`` to "
"deploy the project."
msgstr ""

#: ../../docs/setuptools.txt:1829
msgid "``--multi-version, -m``"
msgstr ""

#: ../../docs/setuptools.txt:1815
msgid ""
"\"Multi-version\" mode. Specifying this option prevents ``develop`` from "
"adding an ``easy-install.pth`` entry for the project(s) being deployed, "
"and if an entry for any version of a project already exists, the entry "
"will be removed upon successful deployment.  In multi-version mode, no "
"specific version of the package is available for importing, unless you "
"use ``pkg_resources.require()`` to put it on ``sys.path``, or you are "
"running a wrapper script generated by ``setuptools`` or EasyInstall.  (In"
" which case the wrapper script calls ``require()`` for you.)"
msgstr ""

#: ../../docs/setuptools.txt:1824
msgid ""
"Note that if you install to a directory other than ``site-packages``, "
"this option is automatically in effect, because ``.pth`` files can only "
"be used in ``site-packages`` (at least in Python 2.3 and 2.4). So, if you"
" use the ``--install-dir`` or ``-d`` option (or they are set via "
"configuration file(s)) your project and its dependencies will be deployed"
" in multi- version mode."
msgstr ""

#: ../../docs/setuptools.txt:1838
msgid "``--install-dir=DIR, -d DIR``"
msgstr ""

#: ../../docs/setuptools.txt:1832
msgid ""
"Set the installation directory (staging area).  If this option is not "
"directly specified on the command line or in a distutils configuration "
"file, the distutils default installation location is used.  Normally, "
"this will be the ``site-packages`` directory, but if you are using "
"distutils configuration files, setting things like ``prefix`` or "
"``install_lib``, then those settings are taken into account when "
"computing the default staging area."
msgstr ""

#: ../../docs/setuptools.txt:1847
msgid "``--script-dir=DIR, -s DIR``"
msgstr ""

#: ../../docs/setuptools.txt:1841
msgid ""
"Set the script installation directory.  If you don't supply this option "
"(via the command line or a configuration file), but you *have* supplied "
"an ``--install-dir`` (via command line or config file), then this option "
"defaults to the same directory, so that the scripts will be able to find "
"their associated package installation.  Otherwise, this setting defaults "
"to the location where the distutils would normally install scripts, "
"taking any distutils configuration file settings into account."
msgstr ""

#: ../../docs/setuptools.txt:1851
msgid "``--exclude-scripts, -x``"
msgstr ""

#: ../../docs/setuptools.txt:1850
msgid ""
"Don't deploy script wrappers.  This is useful if you don't want to "
"disturb existing versions of the scripts in the staging area."
msgstr ""

#: ../../docs/setuptools.txt:1857
msgid "``--always-copy, -a``"
msgstr ""

#: ../../docs/setuptools.txt:1854
msgid ""
"Copy all needed distributions to the staging area, even if they are "
"already present in another directory on ``sys.path``.  By default, if a "
"requirement can be met using a distribution that is already available in "
"a directory on ``sys.path``, it will not be copied to the staging area."
msgstr ""

#: ../../docs/setuptools.txt:1866
msgid "``--egg-path=DIR``"
msgstr ""

#: ../../docs/setuptools.txt:1860
msgid ""
"Force the generated ``.egg-link`` file to use a specified relative path "
"to the source directory.  This can be useful in circumstances where your "
"installation directory is being shared by code running under multiple "
"platforms (e.g. Mac and Windows) which have different absolute locations "
"for the code under development, but the same *relative* locations with "
"respect to the installation directory.  If you use this option when "
"installing, you must supply the same relative path when uninstalling."
msgstr ""

#: ../../docs/setuptools.txt:1868
msgid ""
"In addition to the above options, the ``develop`` command also accepts "
"all of the same options accepted by ``easy_install``.  If you've "
"configured any ``easy_install`` settings in your ``setup.cfg`` (or other "
"distutils config files), the ``develop`` command will use them as "
"defaults, unless you override them in a ``[develop]`` section or on the "
"command line."
msgstr ""

#: ../../docs/setuptools.txt:1876
msgid "``easy_install`` - Find and install packages"
msgstr ""

#: ../../docs/setuptools.txt:1878
msgid ""
"This command runs the `EasyInstall tool <easy_install.html>`_ for you.  "
"It is exactly equivalent to running the ``easy_install`` command.  All "
"command line arguments following this command are consumed and not "
"processed further by the distutils, so this must be the last command "
"listed on the command line.  Please see the EasyInstall documentation for"
" the options reference and usage examples. Normally, there is no reason "
"to use this command via the command line, as you can just use "
"``easy_install`` directly.  It's only listed here so that you know it's a"
" distutils command, which means that you can:"
msgstr ""

#: ../../docs/setuptools.txt:1888
msgid "create command aliases that use it,"
msgstr ""

#: ../../docs/setuptools.txt:1889
msgid "create distutils extensions that invoke it as a subcommand, and"
msgstr ""

#: ../../docs/setuptools.txt:1890
msgid ""
"configure options for it in your ``setup.cfg`` or other distutils config "
"files."
msgstr ""

#: ../../docs/setuptools.txt:1897
msgid "``egg_info`` - Create egg metadata and set build tags"
msgstr ""

#: ../../docs/setuptools.txt:1899
msgid ""
"This command performs two operations: it updates a project's ``.egg-"
"info`` metadata directory (used by the ``bdist_egg``, ``develop``, and "
"``test`` commands), and it allows you to temporarily change a project's "
"version string, to support \"daily builds\" or \"snapshot\" releases.  It"
" is run automatically by the ``sdist``, ``bdist_egg``, ``develop``, and "
"``test`` commands in order to update the project's metadata, but you can "
"also specify it explicitly in order to temporarily change the project's "
"version string while executing other commands.  (It also generates the"
"``.egg-info/SOURCES.txt`` manifest file, which is used when you are "
"building source distributions.)"
msgstr ""

#: ../../docs/setuptools.txt:1909
msgid ""
"In addition to writing the core egg metadata defined by ``setuptools`` "
"and required by ``pkg_resources``, this command can be extended to write "
"other metadata files as well, by defining entry points in the "
"``egg_info.writers`` group.  See the section on `Adding new EGG-INFO "
"Files`_ below for more details. Note that using additional metadata "
"writers may require you to include a ``setup_requires`` argument to "
"``setup()`` in order to ensure that the desired writers are available on "
"``sys.path``."
msgstr ""

#: ../../docs/setuptools.txt:1919
msgid "Release Tagging Options"
msgstr ""

#: ../../docs/setuptools.txt:1921
msgid ""
"The following options can be used to modify the project's version string "
"for all remaining commands on the setup command line.  The options are "
"processed in the order shown, so if you use more than one, the requested "
"tags will be added in the following order:"
msgstr ""

#: ../../docs/setuptools.txt:1938
msgid "``--tag-build=NAME, -b NAME``"
msgstr ""

#: ../../docs/setuptools.txt:1927
msgid ""
"Append NAME to the project's version string.  Due to the way setuptools "
"processes \"pre-release\" version suffixes beginning with the letters "
"\"a\" through \"e\" (like \"alpha\", \"beta\", and \"candidate\"), you "
"will usually want to use a tag like \".build\" or \".dev\", as this will "
"cause the version number to be considered *lower* than the project's "
"default version.  (If you want to make the version number *higher* than "
"the default version, you can always leave off --tag-build and then use "
"one or both of the following options.)"
msgstr ""

#: ../../docs/setuptools.txt:1936
msgid ""
"If you have a default build tag set in your ``setup.cfg``, you can "
"suppress it on the command line using ``-b \"\"`` or ``--tag-build=\"\"``"
" as an argument to the ``egg_info`` command."
msgstr ""

#: ../../docs/setuptools.txt:1942
msgid "``--tag-date, -d``"
msgstr ""

#: ../../docs/setuptools.txt:1941
msgid ""
"Add a date stamp of the form \"-YYYYMMDD\" (e.g. \"-20050528\") to the "
"project's version number."
msgstr ""

#: ../../docs/setuptools.txt:1947
msgid "``--no-date, -D``"
msgstr ""

#: ../../docs/setuptools.txt:1945
msgid ""
"Don't include a date stamp in the version number.  This option is "
"included so you can override a default setting in ``setup.cfg``."
msgstr ""

#: ../../docs/setuptools.txt:1949
msgid ""
"(Note: Because these options modify the version number used for source "
"and binary distributions of your project, you should first make sure that"
" you know how the resulting version numbers will be interpreted by "
"automated tools like EasyInstall.  See the section above on `Specifying "
"Your Project's Version`_ for an explanation of pre- and post-release "
"tags, as well as tips on how to choose and verify a versioning scheme for"
" your your project.)"
msgstr ""

#: ../../docs/setuptools.txt:1956
msgid ""
"For advanced uses, there is one other option that can be set, to change "
"the location of the project's ``.egg-info`` directory.  Commands that "
"need to find the project's source directory or metadata should get it "
"from this setting:"
msgstr ""

#: ../../docs/setuptools.txt:1962
msgid "Other ``egg_info`` Options"
msgstr ""

#: ../../docs/setuptools.txt:1972
msgid "``--egg-base=SOURCEDIR, -e SOURCEDIR``"
msgstr ""

#: ../../docs/setuptools.txt:1965
msgid ""
"Specify the directory that should contain the .egg-info directory.  This "
"should normally be the root of your project's source tree (which is not "
"necessarily the same as your project directory; some projects use a "
"``src`` or ``lib`` subdirectory as the source root).  You should not "
"normally need to specify this directory, as it is normally determined "
"from the ``package_dir`` argument to the ``setup()`` function, if any.  "
"If there is no ``package_dir`` set, this option defaults to the current "
"directory."
msgstr ""

#: ../../docs/setuptools.txt:1975
msgid "``egg_info`` Examples"
msgstr ""

#: ../../docs/setuptools.txt:1977
msgid "Creating a dated \"nightly build\" snapshot egg::"
msgstr ""

#: ../../docs/setuptools.txt:1981
msgid ""
"Creating a release with no version tags, even if some default tags are "
"specified in ``setup.cfg``::"
msgstr ""

#: ../../docs/setuptools.txt:1986
msgid ""
"(Notice that ``egg_info`` must always appear on the command line *before*"
" any commands that you want the version changes to apply to.)"
msgstr ""

#: ../../docs/setuptools.txt:1992
msgid "``rotate`` - Delete outdated distribution files"
msgstr ""

#: ../../docs/setuptools.txt:1994
msgid ""
"As you develop new versions of your project, your distribution (``dist``)"
" directory will gradually fill up with older source and/or binary "
"distribution files.  The ``rotate`` command lets you automatically clean "
"these up, keeping only the N most-recently modified files matching a "
"given pattern."
msgstr ""

#: ../../docs/setuptools.txt:2006
msgid "``--match=PATTERNLIST, -m PATTERNLIST``"
msgstr ""

#: ../../docs/setuptools.txt:2000
msgid ""
"Comma-separated list of glob patterns to match.  This option is "
"*required*. The project name and ``-*`` is prepended to the supplied "
"patterns, in order to match only distributions belonging to the current "
"project (in case you have a shared distribution directory for multiple "
"projects).  Typically, you will use a glob pattern like ``.zip`` or "
"``.egg`` to match files of the specified type.  Note that each supplied "
"pattern is treated as a distinct group of files for purposes of selecting"
" files to delete."
msgstr ""

#: ../../docs/setuptools.txt:2012
msgid "``--keep=COUNT, -k COUNT``"
msgstr ""

#: ../../docs/setuptools.txt:2009
msgid ""
"Number of matching distributions to keep.  For each group of files "
"identified by a pattern specified with the ``--match`` option, delete all"
" but the COUNT most-recently-modified files in that group.  This option "
"is *required*."
msgstr ""

#: ../../docs/setuptools.txt:2015
msgid ""
"Directory where the distributions are.  This defaults to the value of the"
" ``bdist`` command's ``--dist-dir`` option, which will usually be the "
"project's ``dist`` subdirectory."
msgstr ""

#: ../../docs/setuptools.txt:2019
msgid ""
"**Example 1**: Delete all .tar.gz files from the distribution directory, "
"except for the 3 most recently modified ones::"
msgstr ""

#: ../../docs/setuptools.txt:2024
msgid ""
"**Example 2**: Delete all Python 2.3 or Python 2.4 eggs from the "
"distribution directory, except the most recently modified one for each "
"Python version::"
msgstr ""

#: ../../docs/setuptools.txt:2033
msgid "``saveopts`` - Save used options to a configuration file"
msgstr ""

#: ../../docs/setuptools.txt:2035
msgid ""
"Finding and editing ``distutils`` configuration files can be a pain, "
"especially since you also have to translate the configuration options "
"from command-line form to the proper configuration file format.  You can "
"avoid these hassles by using the ``saveopts`` command.  Just add it to "
"the command line to save the options you used.  For example, this command"
" builds the project using the ``mingw32`` C compiler, then saves the "
"--compiler setting as the default for future builds (even those run "
"implicitly by the ``install`` command)::"
msgstr ""

#: ../../docs/setuptools.txt:2045
msgid ""
"The ``saveopts`` command saves all options for every command specified on"
" the command line to the project's local ``setup.cfg`` file, unless you "
"use one of the `configuration file options`_ to change where the options "
"are saved.  For example, this command does the same as above, but saves "
"the compiler setting to the site-wide (global) distutils configuration::"
msgstr ""

#: ../../docs/setuptools.txt:2053
msgid ""
"Note that it doesn't matter where you place the ``saveopts`` command on "
"the command line; it will still save all the options specified for all "
"commands. For example, this is another valid way to spell the last "
"example::"
msgstr ""

#: ../../docs/setuptools.txt:2059
msgid ""
"Note, however, that all of the commands specified are always run, "
"regardless of where ``saveopts`` is placed on the command line."
msgstr ""

#: ../../docs/setuptools.txt:2064
msgid "Configuration File Options"
msgstr ""

#: ../../docs/setuptools.txt:2066
msgid ""
"Normally, settings such as options and aliases are saved to the project's"
" local ``setup.cfg`` file.  But you can override this and save them to "
"the global or per-user configuration files, or to a manually-specified "
"filename."
msgstr ""

#: ../../docs/setuptools.txt:2073
msgid "``--global-config, -g``"
msgstr ""

#: ../../docs/setuptools.txt:2071
msgid ""
"Save settings to the global ``distutils.cfg`` file inside the "
"``distutils`` package directory.  You must have write access to that "
"directory to use this option.  You also can't combine this option with "
"``-u`` or ``-f``."
msgstr ""

#: ../../docs/setuptools.txt:2078
msgid "``--user-config, -u``"
msgstr ""

#: ../../docs/setuptools.txt:2076
msgid ""
"Save settings to the current user's ``~/.pydistutils.cfg`` (POSIX) or "
"``$HOME/pydistutils.cfg`` (Windows) file.  You can't combine this option "
"with ``-g`` or ``-f``."
msgstr ""

#: ../../docs/setuptools.txt:2085
msgid "``--filename=FILENAME, -f FILENAME``"
msgstr ""

#: ../../docs/setuptools.txt:2081
msgid ""
"Save settings to the specified configuration file to use.  You can't "
"combine this option with ``-g`` or ``-u``.  Note that if you specify a "
"non-standard filename, the ``distutils`` and ``setuptools`` will not use "
"the file's contents.  This option is mainly included for use in testing."
msgstr ""

#: ../../docs/setuptools.txt:2087
msgid ""
"These options are used by other ``setuptools`` commands that modify "
"configuration files, such as the `alias`_ and `setopt`_ commands."
msgstr ""

#: ../../docs/setuptools.txt:2094
msgid "``setopt`` - Set a distutils or setuptools option in a config file"
msgstr ""

#: ../../docs/setuptools.txt:2096
msgid ""
"This command is mainly for use by scripts, but it can also be used as a "
"quick and dirty way to change a distutils configuration option without "
"having to remember what file the options are in and then open an editor."
msgstr ""

#: ../../docs/setuptools.txt:2100
msgid ""
"**Example 1**.  Set the default C compiler to ``mingw32`` (using long "
"option names)::"
msgstr ""

#: ../../docs/setuptools.txt:2105
msgid ""
"**Example 2**.  Remove any setting for the distutils default package "
"installation directory (short option names)::"
msgstr ""

#: ../../docs/setuptools.txt:2111
msgid "Options for the ``setopt`` command:"
msgstr ""

#: ../../docs/setuptools.txt:2114
msgid "``--command=COMMAND, -c COMMAND``"
msgstr ""

#: ../../docs/setuptools.txt:2114
msgid "Command to set the option for.  This option is required."
msgstr ""

#: ../../docs/setuptools.txt:2117
msgid "``--option=OPTION, -o OPTION``"
msgstr ""

#: ../../docs/setuptools.txt:2117
msgid "The name of the option to set.  This option is required."
msgstr ""

#: ../../docs/setuptools.txt:2121
msgid "``--set-value=VALUE, -s VALUE``"
msgstr ""

#: ../../docs/setuptools.txt:2120
msgid ""
"The value to set the option to.  Not needed if ``-r`` or ``--remove`` is "
"set."
msgstr ""

#: ../../docs/setuptools.txt:2124
msgid "``--remove, -r``"
msgstr ""

#: ../../docs/setuptools.txt:2124
msgid "Remove (unset) the option, instead of setting it."
msgstr ""

#: ../../docs/setuptools.txt:2126
msgid ""
"In addition to the above options, you may use any of the `configuration "
"file options`_ (listed under the `saveopts`_ command, above) to determine"
" which distutils configuration file the option will be added to (or "
"removed from)."
msgstr ""

#: ../../docs/setuptools.txt:2134
msgid "``test`` - Build package and run a unittest suite"
msgstr ""

#: ../../docs/setuptools.txt:2136
msgid ""
"When doing test-driven development, or running automated builds that need"
" testing before they are deployed for downloading or use, it's often "
"useful to be able to run a project's unit tests without actually "
"deploying the project anywhere, even using the ``develop`` command.  The "
"``test`` command runs a project's unit tests without actually deploying "
"it, by temporarily putting the project's source on ``sys.path``, after "
"first running ``build_ext -i`` and ``egg_info`` to ensure that any C "
"extensions and project metadata are up-to-date."
msgstr ""

#: ../../docs/setuptools.txt:2145
msgid ""
"To use this command, your project's tests must be wrapped in a "
"``unittest`` test suite by either a function, a ``TestCase`` class or "
"method, or a module or package containing ``TestCase`` classes.  If the "
"named suite is a module, and the module has an ``additional_tests()`` "
"function, it is called and the result (which must be a "
"``unittest.TestSuite``) is added to the tests to be run.  If the named "
"suite is a package, any submodules and subpackages are recursively added "
"to the overall test suite.  (Note: if your project specifies a "
"``test_loader``, the rules for processing the chosen ``test_suite`` may "
"differ; see the `test_loader`_ documentation for more details.)"
msgstr ""

#: ../../docs/setuptools.txt:2155
msgid ""
"Note that many test systems including ``doctest`` support wrapping their "
"non-``unittest`` tests in ``TestSuite`` objects.  So, if you are using a "
"test package that does not support this, we suggest you encourage its "
"developers to implement test suite support, as this is a convenient and "
"standard way to aggregate a collection of tests to be run under a common "
"test harness."
msgstr ""

#: ../../docs/setuptools.txt:2161
msgid ""
"By default, tests will be run in the \"verbose\" mode of the ``unittest``"
" package's text test runner, but you can get the \"quiet\" mode (just "
"dots) if you supply the ``-q`` or ``--quiet`` option, either as a global "
"option to the setup script (e.g. ``setup.py -q test``) or as an option "
"for the ``test`` command itself (e.g. ``setup.py test -q``).  There is "
"one other option available:"
msgstr ""

#: ../../docs/setuptools.txt:2180
msgid "``--test-suite=NAME, -s NAME``"
msgstr ""

#: ../../docs/setuptools.txt:2169
msgid ""
"Specify the test suite (or module, class, or method) to be run (e.g. "
"``some_module.test_suite``).  The default for this option can be set by "
"giving a ``test_suite`` argument to the ``setup()`` function, e.g.::"
msgstr ""

#: ../../docs/setuptools.txt:2178
msgid ""
"If you did not set a ``test_suite`` in your ``setup()`` call, and do not "
"provide a ``--test-suite`` option, an error will occur."
msgstr ""

#: ../../docs/setuptools.txt:2185
msgid "``upload`` - Upload source and/or egg distributions to PyPI"
msgstr ""

#: ../../docs/setuptools.txt:2188
msgid ""
"**upload** is deprecated in favor of using `twine "
"<https://pypi.org/p/twine>`_"
msgstr ""

#: ../../docs/setuptools.txt:2191
msgid ""
"The ``upload`` command is implemented and `documented "
"<https://docs.python.org/3.1/distutils/uploading.html>`_ in distutils."
msgstr ""

#: ../../docs/setuptools.txt:2195
msgid ""
"New in 20.1: Added keyring support. New in 40.0: Deprecated the upload "
"command."
msgstr ""

#: ../../docs/setuptools.txt:2201
msgid "Configuring setup() using setup.cfg files"
msgstr ""

#: ../../docs/setuptools.txt:2203
msgid "New in 30.3.0 (8 Dec 2016)."
msgstr ""

#: ../../docs/setuptools.txt:2206
msgid ""
"A ``setup.py`` file containing a ``setup()`` function call is still "
"required even if your configuration resides in ``setup.cfg``."
msgstr ""

#: ../../docs/setuptools.txt:2209
msgid ""
"``Setuptools`` allows using configuration files (usually "
":file:`setup.cfg`) to define a package’s metadata and other options that "
"are normally supplied to the ``setup()`` function (declarative config)."
msgstr ""

#: ../../docs/setuptools.txt:2213
msgid ""
"This approach not only allows automation scenarios but also reduces "
"boilerplate code in some cases."
msgstr ""

#: ../../docs/setuptools.txt:2218
msgid ""
"This implementation has limited compatibility with the distutils2-like "
"``setup.cfg`` sections used by the ``pbr`` and ``d2to1`` packages."
msgstr ""

#: ../../docs/setuptools.txt:2221
msgid ""
"Namely: only metadata-related keys from ``metadata`` section are "
"supported (except for ``description-file``); keys from ``files``, "
"``entry_points`` and ``backwards_compat`` are not supported."
msgstr ""

#: ../../docs/setuptools.txt:2270
msgid "Metadata and options are set in the config sections of the same name."
msgstr ""

#: ../../docs/setuptools.txt:2272
msgid ""
"Keys are the same as the keyword arguments one provides to the "
"``setup()`` function."
msgstr ""

#: ../../docs/setuptools.txt:2275
msgid ""
"Complex values can be written comma-separated or placed one per line in "
"*dangling* config values. The following are equivalent:"
msgstr ""

#: ../../docs/setuptools.txt:2288
msgid ""
"In some cases, complex values can be provided in dedicated subsections "
"for clarity."
msgstr ""

#: ../../docs/setuptools.txt:2291
msgid ""
"Some keys allow ``file:``, ``attr:``, and ``find:`` and "
"``find_namespace:`` directives in order to cover common usecases."
msgstr ""

#: ../../docs/setuptools.txt:2294
msgid "Unknown keys are ignored."
msgstr ""

#: ../../docs/setuptools.txt:2298
msgid "Using a ``src/`` layout"
msgstr ""

#: ../../docs/setuptools.txt:2300
msgid ""
"One commonly used package configuration has all the module source code in"
" a subdirectory (often called the ``src/`` layout), like this::"
msgstr ""

#: ../../docs/setuptools.txt:2310
msgid ""
"You can set up your ``setup.cfg`` to automatically find all your packages"
" in the subdirectory like this:"
msgstr ""

#: ../../docs/setuptools.txt:2327
msgid "Specifying values"
msgstr ""

#: ../../docs/setuptools.txt:2329
msgid "Some values are treated as simple strings, some allow more logic."
msgstr ""

#: ../../docs/setuptools.txt:2331
msgid "Type names used below:"
msgstr ""

#: ../../docs/setuptools.txt:2333
msgid "``str`` - simple string"
msgstr ""

#: ../../docs/setuptools.txt:2334
msgid "``list-comma`` - dangling list or string of comma-separated values"
msgstr ""

#: ../../docs/setuptools.txt:2335
msgid "``list-semi`` - dangling list or string of semicolon-separated values"
msgstr ""

#: ../../docs/setuptools.txt:2336
msgid "``bool`` - ``True`` is 1, yes, true"
msgstr ""

#: ../../docs/setuptools.txt:2337
msgid "``dict`` - list-comma where keys are separated from values by ``=``"
msgstr ""

#: ../../docs/setuptools.txt:2338
msgid "``section`` - values are read from a dedicated (sub)section"
msgstr ""

#: ../../docs/setuptools.txt:2341
msgid "Special directives:"
msgstr ""

#: ../../docs/setuptools.txt:2343
msgid ""
"``attr:`` - Value is read from a module attribute.  ``attr:`` supports "
"callables and iterables; unsupported types are cast using ``str()``."
msgstr ""

#: ../../docs/setuptools.txt:2345
msgid "``file:`` - Value is read from a list of files and then concatenated"
msgstr ""

#: ../../docs/setuptools.txt:2349
msgid ""
"The ``file:`` directive is sandboxed and won't reach anything outside the"
" directory containing ``setup.py``."
msgstr ""

#: ../../docs/setuptools.txt:2354
msgid "Metadata"
msgstr ""

#: ../../docs/setuptools.txt:2357
msgid ""
"The aliases given below are supported for compatibility reasons, but "
"their use is not advised."
msgstr ""

#: ../../docs/setuptools.txt:2361 ../../docs/setuptools.txt:2396
msgid "Key"
msgstr ""

#: ../../docs/setuptools.txt:2361
msgid "Aliases"
msgstr ""

#: ../../docs/setuptools.txt:2361 ../../docs/setuptools.txt:2396
msgid "Type"
msgstr ""

#: ../../docs/setuptools.txt:2361
msgid "Minumum Version"
msgstr ""

#: ../../docs/setuptools.txt:2361 ../../docs/setuptools.txt:2396
msgid "Notes"
msgstr ""

#: ../../docs/setuptools.txt:2363
msgid "name"
msgstr ""

#: ../../docs/setuptools.txt:2363 ../../docs/setuptools.txt:2365
#: ../../docs/setuptools.txt:2366 ../../docs/setuptools.txt:2368
#: ../../docs/setuptools.txt:2369 ../../docs/setuptools.txt:2370
#: ../../docs/setuptools.txt:2371 ../../docs/setuptools.txt:2376
#: ../../docs/setuptools.txt:2402
msgid "str"
msgstr ""

#: ../../docs/setuptools.txt:2364
msgid "version"
msgstr ""

#: ../../docs/setuptools.txt:2364
msgid "attr:, file:, str"
msgstr ""

#: ../../docs/setuptools.txt:2364
msgid "39.2.0"
msgstr ""

#: ../../docs/setuptools.txt:2365
msgid "url"
msgstr ""

#: ../../docs/setuptools.txt:2365
msgid "home-page"
msgstr ""

#: ../../docs/setuptools.txt:2366
msgid "download_url"
msgstr ""

#: ../../docs/setuptools.txt:2366
msgid "download-url"
msgstr ""

#: ../../docs/setuptools.txt:2367
msgid "project_urls"
msgstr ""

#: ../../docs/setuptools.txt:2367 ../../docs/setuptools.txt:2414
#: ../../docs/setuptools.txt:2419
msgid "dict"
msgstr ""

#: ../../docs/setuptools.txt:2367
msgid "38.3.0"
msgstr ""

#: ../../docs/setuptools.txt:2368
msgid "author"
msgstr ""

#: ../../docs/setuptools.txt:2369
msgid "author_email"
msgstr ""

#: ../../docs/setuptools.txt:2369
msgid "author-email"
msgstr ""

#: ../../docs/setuptools.txt:2370
msgid "maintainer"
msgstr ""

#: ../../docs/setuptools.txt:2371
msgid "maintainer_email"
msgstr ""

#: ../../docs/setuptools.txt:2371
msgid "maintainer-email"
msgstr ""

#: ../../docs/setuptools.txt:2372
msgid "classifiers"
msgstr ""

#: ../../docs/setuptools.txt:2372
msgid "classifier"
msgstr ""

#: ../../docs/setuptools.txt:2372
msgid "file:, list-comma"
msgstr ""

#: ../../docs/setuptools.txt:2373
msgid "license"
msgstr ""

#: ../../docs/setuptools.txt:2373 ../../docs/setuptools.txt:2374
#: ../../docs/setuptools.txt:2375
msgid "file:, str"
msgstr ""

#: ../../docs/setuptools.txt:2374
msgid "description"
msgstr ""

#: ../../docs/setuptools.txt:2374
msgid "summary"
msgstr ""

#: ../../docs/setuptools.txt:2375
msgid "long_description"
msgstr ""

#: ../../docs/setuptools.txt:2375
msgid "long-description"
msgstr ""

#: ../../docs/setuptools.txt:2376
msgid "long_description_content_type"
msgstr ""

#: ../../docs/setuptools.txt:2376
msgid "38.6.0"
msgstr ""

#: ../../docs/setuptools.txt:2377
msgid "keywords"
msgstr ""

#: ../../docs/setuptools.txt:2377 ../../docs/setuptools.txt:2378
#: ../../docs/setuptools.txt:2379 ../../docs/setuptools.txt:2380
#: ../../docs/setuptools.txt:2381 ../../docs/setuptools.txt:2405
#: ../../docs/setuptools.txt:2406 ../../docs/setuptools.txt:2407
#: ../../docs/setuptools.txt:2408 ../../docs/setuptools.txt:2409
#: ../../docs/setuptools.txt:2410 ../../docs/setuptools.txt:2417
#: ../../docs/setuptools.txt:2418
msgid "list-comma"
msgstr ""

#: ../../docs/setuptools.txt:2378
msgid "platforms"
msgstr ""

#: ../../docs/setuptools.txt:2378
msgid "platform"
msgstr ""

#: ../../docs/setuptools.txt:2379
msgid "provides"
msgstr ""

#: ../../docs/setuptools.txt:2380
msgid "requires"
msgstr ""

#: ../../docs/setuptools.txt:2381
msgid "obsoletes"
msgstr ""

#: ../../docs/setuptools.txt:2385
msgid ""
"A version loaded using the ``file:`` directive must comply with PEP 440. "
"It is easy to accidentally put something other than a valid version "
"string in such a file, so validation is stricter in this case."
msgstr ""

#: ../../docs/setuptools.txt:2389
msgid ""
"Notes: 1. The `version` file attribute has only been supported since "
"39.2.0."
msgstr ""

#: ../../docs/setuptools.txt:2393
msgid "Options"
msgstr ""

#: ../../docs/setuptools.txt:2396
msgid "Minimum Version"
msgstr ""

#: ../../docs/setuptools.txt:2398
msgid "zip_safe"
msgstr ""

#: ../../docs/setuptools.txt:2398 ../../docs/setuptools.txt:2404
#: ../../docs/setuptools.txt:2412
msgid "bool"
msgstr ""

#: ../../docs/setuptools.txt:2399
msgid "setup_requires"
msgstr ""

#: ../../docs/setuptools.txt:2399 ../../docs/setuptools.txt:2400
#: ../../docs/setuptools.txt:2411
msgid "list-semi"
msgstr ""

#: ../../docs/setuptools.txt:2400
msgid "install_requires"
msgstr ""

#: ../../docs/setuptools.txt:2401
msgid "extras_require"
msgstr ""

#: ../../docs/setuptools.txt:2401 ../../docs/setuptools.txt:2415
#: ../../docs/setuptools.txt:2416
msgid "section"
msgstr ""

#: ../../docs/setuptools.txt:2402
msgid "python_requires"
msgstr ""

#: ../../docs/setuptools.txt:2403
msgid "entry_points"
msgstr ""

#: ../../docs/setuptools.txt:2403
msgid "file:, section"
msgstr ""

#: ../../docs/setuptools.txt:2404
msgid "use_2to3"
msgstr ""

#: ../../docs/setuptools.txt:2405
msgid "use_2to3_fixers"
msgstr ""

#: ../../docs/setuptools.txt:2406
msgid "use_2to3_exclude_fixers"
msgstr ""

#: ../../docs/setuptools.txt:2407
msgid "convert_2to3_doctests"
msgstr ""

#: ../../docs/setuptools.txt:2408
msgid "scripts"
msgstr ""

#: ../../docs/setuptools.txt:2409
msgid "eager_resources"
msgstr ""

#: ../../docs/setuptools.txt:2410
msgid "dependency_links"
msgstr ""

#: ../../docs/setuptools.txt:2411
msgid "tests_require"
msgstr ""

#: ../../docs/setuptools.txt:2412
msgid "include_package_data"
msgstr ""

#: ../../docs/setuptools.txt:2413
msgid "packages"
msgstr ""

#: ../../docs/setuptools.txt:2413
msgid "find:, find_namespace:, list-comma"
msgstr ""

#: ../../docs/setuptools.txt:2414
msgid "package_dir"
msgstr ""

#: ../../docs/setuptools.txt:2415
msgid "package_data"
msgstr ""

#: ../../docs/setuptools.txt:2416
msgid "exclude_package_data"
msgstr ""

#: ../../docs/setuptools.txt:2417
msgid "namespace_packages"
msgstr ""

#: ../../docs/setuptools.txt:2418
msgid "py_modules"
msgstr ""

#: ../../docs/setuptools.txt:2419
msgid "data_files"
msgstr ""

#: ../../docs/setuptools.txt:2419
msgid "40.6.0"
msgstr ""

#: ../../docs/setuptools.txt:2424
msgid ""
"**packages** - The ``find:`` and ``find_namespace:`` directive can be "
"further configured in a dedicated subsection ``options.packages.find``. "
"This subsection accepts the same keys as the `setuptools.find_packages` "
"and the `setuptools.find_namespace_packages` function: ``where``, "
"``include``, and ``exclude``."
msgstr ""

#: ../../docs/setuptools.txt:2430
msgid ""
"**find_namespace directive** - The ``find_namespace:`` directive is "
"supported since Python >=3.3."
msgstr ""

#: ../../docs/setuptools.txt:2434
msgid "Configuration API"
msgstr ""

#: ../../docs/setuptools.txt:2436
msgid "Some automation tools may wish to access data from a configuration file."
msgstr ""

#: ../../docs/setuptools.txt:2438
msgid ""
"``Setuptools`` exposes a ``read_configuration()`` function for parsing "
"``metadata`` and ``options`` sections into a dictionary."
msgstr ""

#: ../../docs/setuptools.txt:2449
msgid ""
"By default, ``read_configuration()`` will read only the file provided in "
"the first argument. To include values from other configuration files "
"which could be in various places, set the ``find_others`` keyword "
"argument to ``True``."
msgstr ""

#: ../../docs/setuptools.txt:2454
msgid ""
"If you have only a configuration file but not the whole package, you can "
"still try to get data out of it with the help of the "
"``ignore_option_errors`` keyword argument. When it is set to ``True``, "
"all options with errors possibly produced by directives, such as "
"``attr:`` and others, will be silently ignored. As a consequence, the "
"resulting dictionary will include no such options."
msgstr ""

#: ../../docs/setuptools.txt:2463
msgid "Extending and Reusing Setuptools"
msgstr ""

#: ../../docs/setuptools.txt:2466
msgid "Creating ``distutils`` Extensions"
msgstr ""

#: ../../docs/setuptools.txt:2468
msgid ""
"It can be hard to add new commands or setup arguments to the distutils.  "
"But the ``setuptools`` package makes it a bit easier, by allowing you to "
"distribute a distutils extension as a separate project, and then have "
"projects that need the extension just refer to it in their "
"``setup_requires`` argument."
msgstr ""

#: ../../docs/setuptools.txt:2473
msgid ""
"With ``setuptools``, your distutils extension projects can hook in new "
"commands and ``setup()`` arguments just by defining \"entry points\".  "
"These are mappings from command or argument names to a specification of "
"where to import a handler from.  (See the section on `Dynamic Discovery "
"of Services and Plugins`_ above for some more background on entry "
"points.)"
msgstr ""

#: ../../docs/setuptools.txt:2481
msgid "Adding Commands"
msgstr ""

#: ../../docs/setuptools.txt:2483
msgid ""
"You can add new ``setup`` commands by defining entry points in the "
"``distutils.commands`` group.  For example, if you wanted to add a "
"``foo`` command, you might add something like this to your distutils "
"extension project's setup script::"
msgstr ""

#: ../../docs/setuptools.txt:2497
msgid ""
"(Assuming, of course, that the ``foo`` class in ``mypackage.some_module``"
" is a ``setuptools.Command`` subclass.)"
msgstr ""

#: ../../docs/setuptools.txt:2500
msgid ""
"Once a project containing such entry points has been activated on "
"``sys.path``, (e.g. by running \"install\" or \"develop\" with a site-"
"packages installation directory) the command(s) will be available to any "
"``setuptools``-based setup scripts.  It is not necessary to use the "
"``--command-packages`` option or to monkeypatch the ``distutils.command``"
" package to install your commands; ``setuptools`` automatically adds a "
"wrapper to the distutils to search for entry points in the active "
"distributions on ``sys.path``.  In fact, this is how setuptools' own "
"commands are installed: the setuptools project's setup script defines "
"entry points for them!"
msgstr ""

#: ../../docs/setuptools.txt:2512
msgid "Adding ``setup()`` Arguments"
msgstr ""

#: ../../docs/setuptools.txt:2514
msgid ""
"Sometimes, your commands may need additional arguments to the ``setup()``"
" call.  You can enable this by defining entry points in the "
"``distutils.setup_keywords`` group.  For example, if you wanted a "
"``setup()`` argument called ``bar_baz``, you might add something like "
"this to your distutils extension project's setup script::"
msgstr ""

#: ../../docs/setuptools.txt:2532
msgid ""
"The idea here is that the entry point defines a function that will be "
"called to validate the ``setup()`` argument, if it's supplied.  The "
"``Distribution`` object will have the initial value of the attribute set "
"to ``None``, and the validation function will only be called if the "
"``setup()`` call sets it to a non-None value.  Here's an example "
"validation function::"
msgstr ""

#: ../../docs/setuptools.txt:2545
msgid ""
"Your function should accept three arguments: the ``Distribution`` object,"
" the attribute name, and the attribute value.  It should raise a "
"``DistutilsSetupError`` (from the ``distutils.errors`` module) if the "
"argument is invalid.  Remember, your function will only be called with "
"non-None values, and the default value of arguments defined this way is "
"always None.  So, your commands should always be prepared for the "
"possibility that the attribute will be ``None`` when they access it "
"later."
msgstr ""

#: ../../docs/setuptools.txt:2553
msgid ""
"If more than one active distribution defines an entry point for the same "
"``setup()`` argument, *all* of them will be called.  This allows multiple"
" distutils extensions to define a common argument, as long as they agree "
"on what values of that argument are valid."
msgstr ""

#: ../../docs/setuptools.txt:2558
msgid ""
"Also note that as with commands, it is not necessary to subclass or "
"monkeypatch the distutils ``Distribution`` class in order to add your "
"arguments; it is sufficient to define the entry points in your extension,"
" as long as any setup script using your extension lists your project in "
"its ``setup_requires`` argument."
msgstr ""

#: ../../docs/setuptools.txt:2566
msgid "Adding new EGG-INFO Files"
msgstr ""

#: ../../docs/setuptools.txt:2568
msgid ""
"Some extensible applications or frameworks may want to allow third "
"parties to develop plugins with application or framework-specific "
"metadata included in the plugins' EGG-INFO directory, for easy access via"
" the ``pkg_resources`` metadata API.  The easiest way to allow this is to"
" create a distutils extension to be used from the plugin projects' setup "
"scripts (via ``setup_requires``) that defines a new setup keyword, and "
"then uses that data to write an EGG-INFO file when the ``egg_info`` "
"command is run."
msgstr ""

#: ../../docs/setuptools.txt:2576
msgid ""
"The ``egg_info`` command looks for extension points in an "
"``egg_info.writers`` group, and calls them to write the files.  Here's a "
"simple example of a distutils extension defining a setup argument "
"``foo_bar``, which is a list of lines that will be written to "
"``foo_bar.txt`` in the EGG-INFO directory of any project that uses the "
"argument::"
msgstr ""

#: ../../docs/setuptools.txt:2594
msgid ""
"This simple example makes use of two utility functions defined by "
"setuptools for its own use: a routine to validate that a setup keyword is"
" a sequence of strings, and another one that looks up a setup argument "
"and writes it to a file.  Here's what the writer utility looks like::"
msgstr ""

#: ../../docs/setuptools.txt:2606
msgid ""
"As you can see, ``egg_info.writers`` entry points must be a function "
"taking three arguments: a ``egg_info`` command instance, the basename of "
"the file to write (e.g. ``foo_bar.txt``), and the actual full filename "
"that should be written to."
msgstr ""

#: ../../docs/setuptools.txt:2611
msgid ""
"In general, writer functions should honor the command object's "
"``dry_run`` setting when writing files, and use the ``distutils.log`` "
"object to do any console output.  The easiest way to conform to this "
"requirement is to use the ``cmd`` object's ``write_file()``, "
"``delete_file()``, and ``write_or_delete_file()`` methods exclusively for"
" your file operations.  See those methods' docstrings for more details."
msgstr ""

#: ../../docs/setuptools.txt:2620
msgid "Adding Support for Revision Control Systems"
msgstr ""

#: ../../docs/setuptools.txt:2622
msgid ""
"If the files you want to include in the source distribution are tracked "
"using Git, Mercurial or SVN, you can use the following packages to "
"achieve that:"
msgstr ""

#: ../../docs/setuptools.txt:2625
msgid ""
"Git and Mercurial: `setuptools_scm "
"<https://pypi.org/project/setuptools_scm/>`_"
msgstr ""

#: ../../docs/setuptools.txt:2626
msgid "SVN: `setuptools_svn <https://pypi.org/project/setuptools_svn/>`_"
msgstr ""

#: ../../docs/setuptools.txt:2628
msgid ""
"If you would like to create a plugin for ``setuptools`` to find files "
"tracked by another revision control system, you can do so by adding an "
"entry point to the ``setuptools.file_finders`` group.  The entry point "
"should be a function accepting a single directory name, and should yield "
"all the filenames within that directory (and any subdirectories thereof) "
"that are under revision control."
msgstr ""

#: ../../docs/setuptools.txt:2635
msgid ""
"For example, if you were going to create a plugin for a revision control "
"system called \"foobar\", you would write a function something like this:"
msgstr ""

#: ../../docs/setuptools.txt:2643
msgid "And you would register it in a setup script using something like this::"
msgstr ""

#: ../../docs/setuptools.txt:2651
msgid ""
"Then, anyone who wants to use your plugin can simply install it, and "
"their local setuptools installation will be able to find the necessary "
"files."
msgstr ""

#: ../../docs/setuptools.txt:2654
msgid ""
"It is not necessary to distribute source control plugins with projects "
"that simply use the other source control system, or to specify the "
"plugins in ``setup_requires``.  When you create a source distribution "
"with the ``sdist`` command, setuptools automatically records what files "
"were found in the ``SOURCES.txt`` file.  That way, recipients of source "
"distributions don't need to have revision control at all.  However, if "
"someone is working on a package by checking out with that system, they "
"will need the same plugin(s) that the original author is using."
msgstr ""

#: ../../docs/setuptools.txt:2663
msgid "A few important points for writing revision control file finders:"
msgstr ""

#: ../../docs/setuptools.txt:2665
msgid ""
"Your finder function MUST return relative paths, created by appending to "
"the passed-in directory name.  Absolute paths are NOT allowed, nor are "
"relative paths that reference a parent directory of the passed-in "
"directory."
msgstr ""

#: ../../docs/setuptools.txt:2669
msgid ""
"Your finder function MUST accept an empty string as the directory name, "
"meaning the current directory.  You MUST NOT convert this to a dot; just "
"yield relative paths.  So, yielding a subdirectory named ``some/dir`` "
"under the current directory should NOT be rendered as ``./some/dir`` or "
"``/somewhere/some/dir``, but *always* as simply ``some/dir``"
msgstr ""

#: ../../docs/setuptools.txt:2675
msgid ""
"Your finder function SHOULD NOT raise any errors, and SHOULD deal "
"gracefully with the absence of needed programs (i.e., ones belonging to "
"the revision control system itself.  It *may*, however, use "
"``distutils.log.warn()`` to inform the user of the missing program(s)."
msgstr ""

#: ../../docs/setuptools.txt:2682
msgid "Subclassing ``Command``"
msgstr ""

#: ../../docs/setuptools.txt:2684
msgid ""
"Sorry, this section isn't written yet, and neither is a lot of what's "
"below this point."
msgstr ""

#: ../../docs/setuptools.txt:2687 ../../docs/setuptools.txt:2696
#: ../../docs/setuptools.txt:2702 ../../docs/setuptools.txt:2708
#: ../../docs/setuptools.txt:2714
msgid "XXX"
msgstr ""

#: ../../docs/setuptools.txt:2691
msgid "Reusing ``setuptools`` Code"
msgstr ""

#: ../../docs/setuptools.txt:2694
msgid "``ez_setup``"
msgstr ""

#: ../../docs/setuptools.txt:2700
msgid "``setuptools.archive_util``"
msgstr ""

#: ../../docs/setuptools.txt:2706
msgid "``setuptools.sandbox``"
msgstr ""

#: ../../docs/setuptools.txt:2712
msgid "``setuptools.package_index``"
msgstr ""

#: ../../docs/setuptools.txt:2718
msgid "Mailing List and Bug Tracker"
msgstr ""

#: ../../docs/setuptools.txt:2720
msgid ""
"Please use the `distutils-sig mailing list`_ for questions and discussion"
" about setuptools, and the `setuptools bug tracker`_ ONLY for issues you "
"have confirmed via the list are actual bugs, and which you have reduced "
"to a minimal set of steps to reproduce."
msgstr ""

